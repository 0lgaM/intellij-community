import com.intellij.openapi.util.SystemInfoRt
import com.intellij.openapi.util.io.FileUtilRt
import org.apache.tools.ant.BuildException

/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

target(default: "Unpack JDKs") {
  unpackJdks()
}

def unpackJdks() {
  String home = guessHome(this)
  def osDirName = SystemInfoRt.isWindows ? "win" : SystemInfoRt.isMac ? "mac" : "linux"
  String basePath
  if (new File(home).getName().equals("community")) {
    basePath = new File(home).getParent()
  }
  else {
    basePath = home
  }

  def jdkDir = new File(basePath, "build/jdk")
  def osDir = new File(jdkDir, osDirName)
  if (!osDir.isDirectory()) {
    ant.project.log("Cannot unpack JDK: $osDir not found")
    return
  }

  unpackJdk(osDir, jdkDir, "jre6", "1.6")
  unpackJdk(osDir, jdkDir, "jbsdk8", "1.8")
}

private void unpackJdk(File osDir, File jdkDir, String archiveFileNamePrefix, String targetDirectoryName) {
  def jdkFiles = osDir.listFiles().findAll { it.name.startsWith(archiveFileNamePrefix) }
  if (SystemInfoRt.isWindows) {
    def arch = System.getenv("ProgramFiles(x86)") != null ? "x64" : "x86"
    jdkFiles = jdkFiles.findAll { it.name.endsWith("_${arch}.tar.gz") }
  }
  if (SystemInfoRt.isLinux) {
    jdkFiles = jdkFiles.findAll { it.name.endsWith("64.tar.gz") }
  }
  if (jdkFiles.empty) {
    throw new BuildException("Cannot unpack JDK: $archiveFileNamePrefix not found in $osDir")
  }
  if (jdkFiles.size() > 1) {
    throw new BuildException("Cannot unpack JDK: several matching files are found ($jdkFiles)")
  }

  File jdkFile = jdkFiles.first()
  def destDir = new File(jdkDir, targetDirectoryName)
  FileUtilRt.delete(destDir)
  ant.project.log("Extracting $jdkFile to $destDir")
  ant.mkdir(dir: destDir)

  if (jdkFile.name.endsWith(".tar.gz")) {
    if (SystemInfoRt.isWindows) {
      ant.untar(src: jdkFile, dest: destDir, compression: 'gzip')
    }
    else {
      //'tar' and 'mv' commands are used instead of Ant tasks to ensure that executable flag and symlink will be preserved
      ant.exec(executable: "tar", dir: jdkFile.getParent()) {
        arg(value: "-xf")
        arg(value: jdkFile.name)
        arg(value: "--directory")
        arg(value: destDir)
      }
      def jdkContents = new File(destDir, "jdk/Contents")
      if (SystemInfoRt.isMac && jdkContents.exists()) {
        jdkContents.listFiles().each { file ->
          ant.exec(executable: "mv", dir: destDir) {
            arg(value: file.absolutePath)
            arg(value: destDir)
          }
        }
      }
    }
  }
  else {
    throw new BuildException("Cannot unpack JDK: unknown extension of file '${jdkFile.name}'")
  }
}

static String guessHome(Script script) {
  File home = new File(script["gant.file"].substring("file:".length()))

  while (home != null) {
    if (home.isDirectory()) {
      if (new File(home, ".idea").exists()) return home.getCanonicalPath()
    }

    home = home.getParentFile()
  }

  return null
}
