import org.jetbrains.jps.LayoutInfo
import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome
import org.jetbrains.jps.Build
import org.jetbrains.jps.Paths

includeTargets << new File("${guessHome(this)}/community/build/scripts/utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/ultimate_utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/libLicenses.gant")

//requireProperty("buildNumber", requireProperty("build.number", snapshot))

def Build build

init = { product_build -> 
  projectBuilder.stage("Cleaning, creating folders, initializing timestamps")
  build = product_build 
  requireProperty("buildNumber", requireProperty("build.number", snapshot))			
  loadProject()
  projectBuilder.arrangeModuleCyclesOutputs = true

  if (build.steps.clear) {
	projectBuilder.stage("Cleaning up sandbox folder")
	forceDelete(build.paths.sandbox)

	projectBuilder.stage("Creating folders")
	[build.paths.sandbox, build.paths.classesTarget, build.paths.distWin, build.paths.distWinZip, build.paths.distAll,
		build.paths.distJars, build.paths.distUnix, build.paths.distMac, build.paths.distDev, build.paths.artifacts].each {
		ant.mkdir(dir: it)
	}
  }	
  ant.tstamp() {
	format(property: "today.year", pattern: "yyyy")
  }
  build.setModules(project.modules.values())  
  projectBuilder.stage("Init done")
}

compile = { 
  projectBuilder.stage("Target compilation.")
  println project
  if (build.steps.zipSources) {
    projectBuilder.stage("zip: $build.home $build.paths.artifacts")
    zipSources(build.home, build.paths.artifacts)
  }
  if (build.steps.compile) {
	build.compile()
  }	
  projectBuilder.stage("Target compilation finished .")
}

scramble = { args ->
  if (isUnderTeamCity()) {
    projectBuilder.stage("Scrambling")
    
    getPreviousLogs()

    def prevBuildLog = "${build.paths.sandbox}/prevBuild/logs/ChangeLog.txt"
    if (!new File(prevBuildLog).exists()) prevBuildLog = null

    def inc = prevBuildLog != null ? "looseChangeLogFileIn=\"${prevBuildLog}\"" : ""
    copyAndPatchFile("$build.home/build/conf/script.zkm.stub", "${build.paths.sandbox}/script.zkm",
                     ["CLASSES": "\"$build.paths.distJars/lib/${args.jarName}\"", "SCRAMBLED_CLASSES": build.paths.distJars/lib, "INCREMENTAL": inc])

    ant.mkdir(dir: "$build.paths.artifacts/${args.jarName}.unscrambled")
    def unscrambledPath = "$build.paths.artifacts/${args.jarName}.unscramble"
    ant.copy(file: "$build.paths.distJars/lib/${args.jarName}", todir: unscrambledPath)
    notifyArtifactBuilt("$unscrambledPath/${args.jar}")

    zkmScramble("$build.paths.sandbox/script.zkm", build.paths.distJars/lib, args.jarName)

    ant.zip(destfile: "$build.paths.artifacts/logs.zip") {
      fileset(file: "ChangeLog.txt")
      fileset(file: "ZKM_log.txt")
      fileset(file: "$build.paths.sandbox/script.zkm")
    }

    ant.delete(file: "ChangeLog.txt")
    ant.delete(file: "ZKM_log.txt")
  }
  else {
    projectBuilder.info("teamcity.buildType.id is not defined. Incremental scrambling is disabled")
  }
}

private boolean isUnderTeamCity() {
  return isDefined("teamcity.buildType.id")
}

private lastPinnedBuild() {
  "http://buildserver/httpAuth/repository/download/${this."teamcity.buildType.id"}/.lastPinned"
}

private getPreviousLogs() {
  def removeZip = "${lastPinnedBuild()}/logs.zip"
  def localZip = "${build.paths.sandbox}/prevBuild/logs.zip"
  ant.mkdir(dir: "${build.paths.sandbox}/prevBuild")
  ant.get(src: removeZip,
          dest: localZip,
          username: "builduser",
          password: "qpcv4623nmdu",
          ignoreerrors: "true"
  )

  if (new File(localZip).exists()) {
    ant.unzip(src: localZip, dest: "${build.paths.sandbox}.prevBuild/logs") {
      patternset {
        include(name: "ChangeLog.txt")
      }
    }
  }
}
