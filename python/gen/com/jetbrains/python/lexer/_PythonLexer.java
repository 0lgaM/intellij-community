/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.ContainerUtil;import com.jetbrains.python.PyTokenTypes;
import com.intellij.util.containers.Stack;
import com.intellij.openapi.util.text.StringUtil;
import com.jetbrains.python.psi.PyStringLiteralUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Python.flex</tt>
 */
class _PythonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int FSTRING = 6;
  public static final int FSTRING_FRAGMENT = 8;
  public static final int FSTRING_FRAGMENT_FORMAT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\43\1\45\1\112\1\44\1\14\22\0\1\42\1\33\1\27\1\13\1\0\1\101\1\102\1"+
    "\25\1\35\1\36\1\76\1\75\1\110\1\21\1\17\1\100\1\1\1\5\6\3\2\2\1\41\1\46\1"+
    "\106\1\34\1\105\1\0\1\77\1\4\1\11\1\23\1\4\1\20\1\30\3\15\1\22\1\15\1\12\2"+
    "\15\1\10\2\15\1\24\2\15\1\24\2\15\1\6\2\15\1\37\1\26\1\40\1\104\1\7\1\111"+
    "\1\47\1\56\1\60\1\51\1\53\1\65\1\72\1\74\1\63\1\22\1\57\1\61\1\71\1\50\1\62"+
    "\1\67\1\15\1\54\1\52\1\55\1\64\1\15\1\73\1\66\1\70\1\15\1\31\1\103\1\32\1"+
    "\107\6\0\1\112\24\0\1\15\12\0\1\15\4\0\1\15\5\0\27\15\1\0\12\15\4\0\14\15"+
    "\16\0\5\15\7\0\1\15\1\0\1\15\1\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15\6\0\1\15"+
    "\1\0\3\15\1\0\1\15\1\0\4\15\1\0\23\15\1\0\11\15\1\0\26\15\2\0\1\15\6\0\10"+
    "\15\10\0\16\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\1\15\10\0\13\15\5\0\3\15\15"+
    "\0\12\16\4\0\6\15\1\0\10\15\2\0\12\15\1\0\6\15\12\16\3\15\2\0\14\15\2\0\3"+
    "\15\12\16\14\15\4\0\1\15\5\0\16\15\2\0\14\15\4\0\5\15\1\0\10\15\6\0\20\15"+
    "\2\0\12\16\1\15\2\0\16\15\1\0\1\15\3\0\4\15\2\0\11\15\2\0\2\15\2\0\4\15\10"+
    "\0\1\15\4\0\2\15\1\0\1\15\1\0\3\15\1\0\6\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0"+
    "\2\15\2\0\1\15\1\0\5\15\4\0\2\15\2\0\3\15\3\0\1\15\7\0\4\15\1\0\1\15\7\0\12"+
    "\16\6\15\13\0\3\15\1\0\11\15\1\0\2\15\1\0\2\15\1\0\5\15\2\0\12\15\1\0\3\15"+
    "\1\0\3\15\2\0\1\15\30\0\1\15\7\0\3\15\1\0\10\15\2\0\6\15\2\0\2\15\2\0\3\15"+
    "\10\0\2\15\4\0\2\15\1\0\1\15\1\0\1\15\20\0\2\15\1\0\6\15\3\0\3\15\1\0\4\15"+
    "\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15\4\0\5\15\3\0\3\15"+
    "\1\0\4\15\2\0\1\15\6\0\1\15\10\0\4\15\1\0\10\15\1\0\3\15\1\0\30\15\3\0\10"+
    "\15\1\0\3\15\1\0\4\15\7\0\2\15\1\0\3\15\5\0\4\15\1\0\5\15\2\0\4\15\5\0\2\15"+
    "\7\0\1\15\2\0\2\15\16\0\3\15\1\0\10\15\1\0\7\15\1\0\3\15\1\0\5\15\5\0\4\15"+
    "\7\0\1\15\12\0\6\15\2\0\2\15\1\0\22\15\3\0\10\15\1\0\11\15\1\0\1\15\2\0\7"+
    "\15\3\0\1\15\4\0\6\15\1\0\1\15\1\0\10\15\2\0\2\15\14\0\17\15\1\0\12\16\7\0"+
    "\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1"+
    "\15\1\0\1\15\2\0\2\15\1\0\15\15\1\0\3\15\2\0\5\15\1\0\1\15\1\0\6\15\2\0\12"+
    "\16\2\0\4\15\10\0\2\15\13\0\1\15\1\0\1\15\1\0\1\15\4\0\12\15\1\0\24\15\3\0"+
    "\5\15\1\0\12\15\6\0\1\15\11\0\12\16\4\15\2\0\6\15\1\0\1\15\5\0\1\15\2\0\13"+
    "\15\1\0\15\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\1\15\1\0\4\15\2\0\7"+
    "\15\1\0\1\15\1\0\4\15\2\0\16\15\2\0\6\15\2\0\15\15\2\0\14\15\3\0\13\15\7\0"+
    "\15\15\1\0\7\15\13\0\4\15\14\0\1\15\1\0\2\15\14\0\4\15\3\0\1\15\4\0\2\15\15"+
    "\0\3\15\2\0\12\15\15\0\1\15\23\0\5\15\12\16\3\0\6\15\1\0\23\15\1\0\2\15\6"+
    "\0\6\15\5\0\15\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1\0\7\15\1\0\1\15\3"+
    "\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15\14\0\2\112\25\0\1\15\4\0\1\15\14\0\1\15"+
    "\15\0\1\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\4\15\1\0\13\15\2\0\4\15\5\0\5\15\4\0\1\15\7\0\17\15\6\0\15\15"+
    "\7\0\10\15\11\0\7\15\1\0\7\15\6\0\3\15\11\0\5\15\2\0\5\15\3\0\7\15\2\0\2\15"+
    "\2\0\3\15\5\0\13\15\12\16\2\15\4\0\3\15\1\0\12\15\1\0\1\15\7\0\11\15\2\0\27"+
    "\15\2\0\15\15\3\0\1\15\1\0\1\15\2\0\1\15\16\0\1\15\12\16\5\15\3\0\5\15\12"+
    "\0\6\15\2\0\6\15\2\0\6\15\11\0\13\15\1\0\2\15\2\0\7\15\4\0\5\15\3\0\5\15\5"+
    "\0\12\15\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\12\15\3\0\15\15\3\0\2\15"+
    "\30\0\16\15\4\0\1\15\2\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0\14\15\1\0\16"+
    "\15\1\0\2\15\1\0\1\15\15\0\1\15\2\0\4\15\4\0\10\15\1\0\5\15\12\0\6\15\2\0"+
    "\1\15\1\0\14\15\1\0\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0\6\15\1"+
    "\0\2\15\5\0\10\15\1\0\3\15\1\0\13\15\4\0\3\15\4\0\6\15\1\0\12\16\4\15\2\0"+
    "\1\15\11\0\5\15\5\0\3\15\3\0\12\16\1\15\1\0\1\15\3\0\10\15\6\0\1\15\1\0\7"+
    "\15\1\0\1\15\1\0\4\15\1\0\2\15\6\0\1\15\5\0\7\15\2\0\7\15\3\0\6\15\1\0\1\15"+
    "\10\0\6\15\2\0\10\15\10\0\6\15\2\0\1\15\3\0\1\15\13\0\10\15\5\0\15\15\3\0"+
    "\2\15\6\0\5\15\3\0\6\15\10\0\10\15\2\0\7\15\16\0\4\15\4\0\3\15\15\0\1\15\2"+
    "\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0\21\15\1\0\4\15\2\0\10\15"+
    "\1\0\7\15\1\0\14\15\1\0\4\15\1\0\5\15\1\0\1\15\3\0\11\15\1\0\10\15\2\0\22"+
    "\16\5\0\1\15\12\0\2\15\1\0\2\15\1\0\5\15\6\0\2\15\1\0\1\15\2\0\1\15\1\0\12"+
    "\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15\1\0\1\15\1\0\3\15"+
    "\1\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\2\15\1"+
    "\0\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\1\0\12\15\1\0\5\15\1"+
    "\0\3\15\1\0\5\15\1\0\5\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\3\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\20\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\43"+
    "\1\44\2\45\1\46\1\3\2\47\1\20\3\3\2\50"+
    "\1\51\1\10\1\51\1\52\1\3\2\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\3\3\2\50"+
    "\1\64\1\10\1\52\1\2\5\0\1\2\1\65\1\0"+
    "\1\66\1\0\1\3\1\65\1\67\1\70\3\7\1\71"+
    "\3\7\1\3\2\72\1\73\1\74\15\3\1\75\1\76"+
    "\1\77\1\100\10\3\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\0\3\45\1\120\3\45\1\3\6\47"+
    "\2\0\1\121\1\3\2\0\2\44\2\51\1\3\10\53"+
    "\1\56\1\3\1\0\1\44\1\64\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\65\1\0\1\3\1\0"+
    "\1\7\1\122\1\123\1\0\1\122\1\3\2\0\1\124"+
    "\1\3\1\125\1\126\1\127\5\3\1\130\6\3\1\131"+
    "\5\3\1\132\1\133\1\134\1\135\1\0\1\45\1\136"+
    "\1\137\1\0\1\136\1\3\1\47\2\140\1\51\1\3"+
    "\3\53\1\51\1\141\1\64\1\0\2\142\1\0\1\3"+
    "\1\72\1\3\1\143\1\144\10\3\1\145\1\3\1\146"+
    "\3\3\1\0\2\137\13\0\2\3\1\147\1\3\1\150"+
    "\1\151\4\3\1\152\1\3\1\153\7\0\1\122\1\154"+
    "\1\155\1\156\1\3\1\157\1\160\1\3\1\161\1\136"+
    "\1\140\1\141\1\142\1\0\1\162\1\3\1\163\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u01c2"+
    "\0\u0465\0\u04b0\0\u01c2\0\u01c2\0\u04fb\0\u0546\0\u01c2\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u01c2"+
    "\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e"+
    "\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6"+
    "\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e"+
    "\0\u0c99\0\u0ce4\0\u01c2\0\u01c2\0\u01c2\0\u01c2\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\u0e10\0\u01c2\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87"+
    "\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df"+
    "\0\u122a\0\u1275\0\u12c0\0\u01c2\0\u01c2\0\u130b\0\u01c2\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u01c2\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482"+
    "\0\u14cd\0\u1518\0\u01c2\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f"+
    "\0\u16da\0\u01c2\0\u1725\0\u1770\0\u01c2\0\u17bb\0\u1806\0\u1851"+
    "\0\u01c2\0\u01c2\0\u189c\0\u18e7\0\u1932\0\u01c2\0\u197d\0\u19c8"+
    "\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u01c2\0\u01c2\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u1f0e"+
    "\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\u01c2"+
    "\0\u01c2\0\u2166\0\u01c2\0\u01c2\0\u21b1\0\u01c2\0\u01c2\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u21fc\0\u01c2\0\u01c2\0\u2247\0\u2292\0\u22dd"+
    "\0\u2328\0\u2373\0\u01c2\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea"+
    "\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u0f3c\0\u01c2"+
    "\0\u26f7\0\u1149\0\u11df\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e"+
    "\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6"+
    "\0\u2b11\0\u2b5c\0\u1518\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3"+
    "\0\u2d1e\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u0384"+
    "\0\u2f2b\0\u2f76\0\u01c2\0\u2f2b\0\u2fc1\0\u300c\0\u3057\0\u30a2"+
    "\0\u02a3\0\u30ed\0\u02a3\0\u02a3\0\u02a3\0\u3138\0\u3183\0\u31ce"+
    "\0\u3219\0\u3264\0\u02a3\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db"+
    "\0\u3426\0\u02a3\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d\0\u01c2"+
    "\0\u01c2\0\u01c2\0\u01c2\0\u35e8\0\u3633\0\u367e\0\u01c2\0\u3633"+
    "\0\u36c9\0\u3714\0\u01c2\0\u375f\0\u37aa\0\u01c2\0\u37f5\0\u2535"+
    "\0\u2661\0\u01c2\0\u375f\0\u3840\0\u01c2\0\u388b\0\u38d6\0\u3921"+
    "\0\u396c\0\u39b7\0\u01c2\0\u3a02\0\u02a3\0\u02a3\0\u3a4d\0\u3a98"+
    "\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u3c5a\0\u02a3\0\u3ca5"+
    "\0\u02a3\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2"+
    "\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u38d6"+
    "\0\u3921\0\u410a\0\u4155\0\u41a0\0\u02a3\0\u41eb\0\u02a3\0\u02a3"+
    "\0\u4236\0\u4281\0\u42cc\0\u4317\0\u02a3\0\u4362\0\u02a3\0\u43ad"+
    "\0\u3e1c\0\u3e67\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u4524\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u456f\0\u02a3\0\u02a3\0\u45ba\0\u02a3\0\u3633"+
    "\0\u01c2\0\u01c2\0\u01c2\0\u4524\0\u01c2\0\u4605\0\u02a3\0\u02a3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\2\11\1\12\1\11\3\12\1\13\1\12"+
    "\1\14\1\7\1\12\1\7\1\15\1\12\1\16\1\12"+
    "\2\13\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\12\1\44"+
    "\1\45\1\46\1\47\1\12\1\50\1\51\1\52\1\53"+
    "\1\13\1\54\1\12\1\55\1\56\1\12\1\57\1\60"+
    "\1\12\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\7\11\76"+
    "\1\77\1\76\1\100\1\0\6\76\2\77\1\101\1\20"+
    "\1\102\12\76\1\34\1\35\1\36\1\103\6\76\1\77"+
    "\1\76\1\77\1\76\1\77\3\76\1\77\25\76\1\0"+
    "\1\7\1\10\2\11\1\12\1\11\3\12\1\104\1\12"+
    "\1\100\1\7\1\12\1\7\1\15\1\12\1\16\1\12"+
    "\2\104\1\105\1\20\1\106\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\107\1\34\1\35"+
    "\1\36\1\103\1\40\1\41\1\42\1\43\1\12\1\44"+
    "\1\110\1\46\1\111\1\12\1\112\1\51\1\52\1\53"+
    "\1\104\1\54\1\12\1\55\1\56\1\12\1\57\1\60"+
    "\1\12\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\7\13\113"+
    "\1\114\1\0\10\113\1\115\1\116\1\117\1\113\1\120"+
    "\13\113\1\103\45\113\1\7\1\10\2\11\1\12\1\11"+
    "\3\12\1\121\1\12\1\100\1\7\1\12\1\7\1\15"+
    "\1\12\1\16\1\12\2\121\1\122\1\20\1\123\1\22"+
    "\1\124\1\125\1\126\1\26\1\127\1\130\1\131\1\132"+
    "\1\133\1\34\1\35\1\36\1\103\1\40\1\41\1\42"+
    "\1\43\1\12\1\44\1\134\1\46\1\135\1\12\1\136"+
    "\1\51\1\52\1\53\1\121\1\54\1\12\1\55\1\56"+
    "\1\12\1\57\1\60\1\12\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\7\13\137\1\140\1\0\10\137\1\141\1\142"+
    "\2\137\1\143\1\125\12\137\1\103\45\137\114\0\1\144"+
    "\1\145\1\144\1\0\1\144\1\146\1\147\1\150\1\151"+
    "\1\152\4\0\1\153\1\154\1\0\1\155\30\0\1\154"+
    "\2\0\1\151\2\0\1\152\1\150\3\0\1\146\25\0"+
    "\3\11\1\0\1\11\1\0\1\156\2\0\1\152\4\0"+
    "\1\153\1\154\1\0\1\155\30\0\1\154\5\0\1\152"+
    "\32\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\26\12\17\0\10\12\1\157\1\12"+
    "\2\0\2\12\1\0\1\12\1\0\1\12\2\157\1\17"+
    "\1\0\1\21\1\22\16\0\5\12\1\157\1\12\1\157"+
    "\1\12\1\157\3\12\1\157\1\22\7\12\16\0\14\14"+
    "\1\0\30\14\1\0\45\14\1\0\3\160\1\0\1\160"+
    "\141\0\1\161\50\0\1\162\5\0\14\163\1\0\10\163"+
    "\1\164\1\165\16\163\1\166\45\163\14\167\1\0\11\167"+
    "\1\170\1\171\15\167\1\166\45\167\1\0\10\12\1\172"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\172"+
    "\1\173\1\0\1\174\1\12\16\0\5\12\1\172\1\12"+
    "\1\172\1\12\1\172\3\12\1\172\10\12\52\0\1\175"+
    "\112\0\1\176\57\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\1\12\1\177\1\12"+
    "\1\200\22\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\13\12\1\201\12\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\4\12\1\202\21\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\12\12\1\203\4\12\1\204\6\12\17\0\10\12"+
    "\1\157\1\12\2\0\2\12\1\0\1\12\1\0\1\12"+
    "\2\157\1\17\1\0\1\21\1\22\16\0\1\205\3\12"+
    "\1\206\1\157\1\12\1\157\1\12\1\157\3\12\1\157"+
    "\1\22\7\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\5\12\1\207\20\12"+
    "\17\0\10\12\1\157\1\12\2\0\2\12\1\0\1\12"+
    "\1\0\1\12\2\157\1\17\1\0\1\21\1\22\16\0"+
    "\5\12\1\210\1\12\1\157\1\12\1\157\3\12\1\157"+
    "\1\22\7\12\17\0\10\12\1\157\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\157\1\17\1\0\1\21"+
    "\1\22\16\0\5\12\1\157\1\12\1\157\1\12\1\157"+
    "\1\211\1\212\1\12\1\157\1\22\7\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\1\213\25\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\5\12\1\214"+
    "\20\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\1\12\1\215\1\12\1\216"+
    "\12\12\1\217\3\12\1\220\3\12\17\0\10\12\1\172"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\172"+
    "\1\173\1\0\1\174\1\12\16\0\5\12\1\221\1\12"+
    "\1\172\1\12\1\172\1\12\1\222\1\223\1\172\10\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\1\224\25\12\17\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\14\12\1\225\11\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\12\12\1\226"+
    "\13\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\25\12\1\227\52\0\1\230"+
    "\112\0\1\231\41\0\1\232\50\0\1\233\112\0\1\234"+
    "\43\0\1\235\46\0\1\236\112\0\1\237\112\0\1\240"+
    "\112\0\1\241\112\0\1\242\50\0\1\243\41\0\1\244"+
    "\50\0\1\245\1\246\15\0\1\247\11\0\2\247\1\101"+
    "\1\0\1\102\24\0\1\247\1\0\1\247\1\0\1\247"+
    "\3\0\1\247\26\0\14\100\1\0\30\100\1\0\45\100"+
    "\14\250\1\0\10\250\1\251\1\252\16\250\1\253\45\250"+
    "\14\254\1\0\11\254\1\255\1\256\15\254\1\253\45\254"+
    "\1\0\10\12\1\257\1\12\2\0\2\12\1\0\1\12"+
    "\1\0\1\12\2\257\1\105\1\0\1\106\1\22\16\0"+
    "\5\12\1\257\1\12\1\257\1\12\1\257\3\12\1\257"+
    "\1\22\7\12\16\0\14\260\1\0\10\260\1\261\1\262"+
    "\16\260\1\0\45\260\14\263\1\0\11\263\1\264\1\265"+
    "\15\263\1\0\45\263\13\0\1\266\26\0\1\267\2\0"+
    "\1\270\46\0\10\12\1\257\1\12\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\2\257\1\105\1\0\1\106\1\22"+
    "\16\0\1\205\3\12\1\206\1\257\1\12\1\257\1\12"+
    "\1\257\3\12\1\257\1\22\7\12\17\0\10\12\1\257"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\257"+
    "\1\105\1\0\1\106\1\22\16\0\5\12\1\271\1\12"+
    "\1\257\1\12\1\257\3\12\1\257\1\22\7\12\17\0"+
    "\10\12\1\257\1\12\2\0\2\12\1\0\1\12\1\0"+
    "\1\12\2\257\1\105\1\0\1\106\1\22\16\0\5\12"+
    "\1\257\1\12\1\257\1\12\1\257\1\211\1\212\1\12"+
    "\1\257\1\22\7\12\16\0\14\113\1\0\10\113\1\0"+
    "\1\272\1\0\1\113\1\273\13\113\1\0\45\113\14\114"+
    "\1\0\10\114\1\100\1\274\1\100\1\114\1\275\13\114"+
    "\1\0\45\114\25\0\1\276\65\0\113\113\27\0\1\277"+
    "\114\0\1\113\62\0\10\12\1\300\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\300\1\301\1\0\1\302"+
    "\1\22\16\0\5\12\1\300\1\12\1\300\1\12\1\300"+
    "\3\12\1\300\1\22\7\12\16\0\14\303\1\0\10\303"+
    "\1\304\1\305\16\303\1\0\45\303\14\306\1\0\11\306"+
    "\1\307\1\310\15\306\1\0\45\306\14\311\1\0\10\311"+
    "\1\0\1\311\1\0\2\311\1\0\1\311\1\175\4\311"+
    "\3\0\1\311\1\0\45\311\1\0\10\12\1\300\1\12"+
    "\2\0\2\12\1\0\1\12\1\0\1\12\2\300\1\301"+
    "\1\0\1\302\1\22\16\0\1\205\3\12\1\206\1\300"+
    "\1\12\1\300\1\12\1\300\3\12\1\300\1\22\7\12"+
    "\17\0\10\12\1\300\1\12\2\0\2\12\1\0\1\12"+
    "\1\0\1\12\2\300\1\301\1\0\1\302\1\22\16\0"+
    "\5\12\1\312\1\12\1\300\1\12\1\300\3\12\1\300"+
    "\1\22\7\12\17\0\10\12\1\300\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\300\1\301\1\0\1\302"+
    "\1\22\16\0\5\12\1\300\1\12\1\300\1\12\1\300"+
    "\1\211\1\212\1\12\1\300\1\22\7\12\16\0\14\137"+
    "\1\0\10\137\1\0\1\313\2\137\2\0\12\137\1\0"+
    "\45\137\14\140\1\0\10\140\1\100\1\314\2\140\2\100"+
    "\12\140\1\0\45\140\25\0\1\315\101\0\1\137\30\0"+
    "\1\137\46\0\1\144\1\145\1\144\1\0\1\144\1\0"+
    "\1\147\2\0\1\152\4\0\1\153\1\154\1\0\1\155"+
    "\30\0\1\154\5\0\1\152\32\0\3\145\1\0\1\145"+
    "\1\0\1\316\7\0\1\153\1\154\1\0\1\155\30\0"+
    "\1\154\40\0\5\317\1\0\1\320\1\0\1\317\6\0"+
    "\1\317\2\0\1\317\4\0\1\317\16\0\1\317\1\0"+
    "\1\317\1\0\1\317\2\0\1\317\1\0\1\317\4\0"+
    "\1\317\26\0\1\144\1\145\1\144\1\0\1\144\106\0"+
    "\1\321\1\0\1\321\1\0\1\321\1\0\1\322\104\0"+
    "\1\323\3\0\1\323\1\0\1\324\104\0\3\160\1\0"+
    "\1\160\12\0\1\154\1\0\1\155\30\0\1\154\40\0"+
    "\3\325\1\0\1\325\13\0\1\326\53\0\1\326\16\0"+
    "\3\11\1\0\1\11\106\0\10\12\1\327\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\327\1\17\1\0"+
    "\1\21\1\22\16\0\5\12\1\327\1\12\1\327\1\12"+
    "\1\327\3\12\1\327\1\22\7\12\17\0\3\160\1\0"+
    "\1\160\1\0\1\330\10\0\1\154\1\0\1\155\30\0"+
    "\1\154\37\0\14\163\1\0\10\163\1\331\1\165\16\163"+
    "\1\166\45\163\25\0\1\332\1\333\13\0\2\334\1\0"+
    "\2\166\44\0\113\163\14\167\1\0\11\167\1\170\1\331"+
    "\15\167\1\166\160\167\26\0\1\333\1\335\12\0\2\334"+
    "\1\0\2\166\45\0\10\12\1\336\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\336\1\173\1\0\1\174"+
    "\1\12\16\0\5\12\1\336\1\12\1\336\1\12\1\336"+
    "\3\12\1\336\10\12\43\0\1\337\114\0\1\340\64\0"+
    "\12\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\16\0\2\12\1\341\23\12\17\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\3\12\1\342\22\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\6\12\1\343"+
    "\17\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\12\12\1\344\3\12\1\345"+
    "\7\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\3\12\1\346\10\12\1\347"+
    "\11\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\11\12\1\350\14\12\17\0"+
    "\12\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\16\0\14\12\1\351\11\12\17\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\6\12\1\352\17\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\21\12\1\353"+
    "\4\12\17\0\10\12\1\327\1\12\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\2\327\1\17\1\0\1\21\1\22"+
    "\16\0\4\12\1\354\1\327\1\12\1\327\1\12\1\327"+
    "\3\12\1\327\1\22\7\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\1\355"+
    "\25\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\1\12\1\356\24\12\17\0"+
    "\12\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\16\0\22\12\1\357\3\12\17\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\20\12\1\360\5\12\17\0\10\12\1\336\1\12\2\0"+
    "\2\12\1\0\1\12\1\0\1\12\2\336\1\173\1\0"+
    "\1\174\1\12\16\0\5\12\1\336\1\12\1\336\1\12"+
    "\1\336\1\12\1\361\1\12\1\336\10\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\5\12\1\362\20\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\1\12"+
    "\1\363\24\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\3\12\1\364\22\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\4\12\1\365\21\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\13\12\1\366\12\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\14\12"+
    "\1\367\11\12\52\0\1\370\112\0\1\371\112\0\1\372"+
    "\112\0\1\373\67\0\1\374\11\0\2\374\1\101\1\0"+
    "\1\102\24\0\1\374\1\0\1\374\1\0\1\374\3\0"+
    "\1\374\26\0\14\250\1\0\10\250\1\375\1\252\16\250"+
    "\1\253\45\250\25\0\1\376\1\377\13\0\2\u0100\1\0"+
    "\2\253\44\0\113\250\14\254\1\0\11\254\1\255\1\375"+
    "\15\254\1\253\160\254\26\0\1\377\1\u0101\12\0\2\u0100"+
    "\1\0\2\253\45\0\10\12\1\u0102\1\12\2\0\2\12"+
    "\1\0\1\12\1\0\1\12\2\u0102\1\105\1\0\1\106"+
    "\1\22\16\0\5\12\1\u0102\1\12\1\u0102\1\12\1\u0102"+
    "\3\12\1\u0102\1\22\7\12\16\0\14\260\1\0\10\260"+
    "\1\u0103\1\262\16\260\1\0\45\260\25\0\1\u0104\65\0"+
    "\113\260\14\263\1\0\11\263\1\264\1\u0103\15\263\1\0"+
    "\160\263\27\0\1\u0105\63\0\14\266\1\0\30\266\1\270"+
    "\45\266\1\0\10\12\1\u0102\1\12\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\2\u0102\1\105\1\0\1\106\1\22"+
    "\16\0\4\12\1\354\1\u0102\1\12\1\u0102\1\12\1\u0102"+
    "\3\12\1\u0102\1\22\7\12\16\0\14\114\1\113\30\114"+
    "\1\113\45\114\14\100\1\0\14\100\1\114\13\100\1\0"+
    "\45\100\25\0\1\u0106\114\0\1\u0106\64\0\10\12\1\u0107"+
    "\1\12\2\0\2\12\1\0\1\12\1\0\1\12\2\u0107"+
    "\1\301\1\0\1\302\1\22\16\0\5\12\1\u0107\1\12"+
    "\1\u0107\1\12\1\u0107\3\12\1\u0107\1\22\7\12\16\0"+
    "\14\303\1\0\10\303\1\u0108\1\305\16\303\1\0\45\303"+
    "\14\306\1\0\11\306\1\307\1\u0109\15\306\1\0\45\306"+
    "\14\303\1\0\10\303\1\u010a\1\305\16\303\1\0\45\303"+
    "\25\0\1\u010b\65\0\113\303\14\306\1\0\11\306\1\307"+
    "\1\u010a\15\306\1\0\160\306\27\0\1\u010c\63\0\14\311"+
    "\1\0\10\311\1\0\1\311\1\0\2\311\1\0\1\311"+
    "\1\0\4\311\3\0\1\311\1\0\45\311\1\0\10\12"+
    "\1\u0107\1\12\2\0\2\12\1\0\1\12\1\0\1\12"+
    "\2\u0107\1\301\1\0\1\302\1\22\16\0\4\12\1\354"+
    "\1\u0107\1\12\1\u0107\1\12\1\u0107\3\12\1\u0107\1\22"+
    "\7\12\16\0\14\100\1\137\30\100\1\137\45\100\25\0"+
    "\1\u010d\66\0\3\145\1\0\1\145\106\0\5\317\1\0"+
    "\1\320\1\0\1\317\1\152\5\0\1\317\2\0\1\317"+
    "\4\0\1\317\16\0\1\317\1\0\1\317\1\0\1\317"+
    "\2\0\1\317\1\0\1\317\1\152\3\0\1\317\26\0"+
    "\5\317\3\0\1\317\6\0\1\317\2\0\1\317\4\0"+
    "\1\317\16\0\1\317\1\0\1\317\1\0\1\317\2\0"+
    "\1\317\1\0\1\317\4\0\1\317\26\0\1\321\1\0"+
    "\1\321\1\0\1\321\1\0\1\322\2\0\1\152\46\0"+
    "\1\152\32\0\1\321\1\0\1\321\1\0\1\321\106\0"+
    "\1\323\3\0\1\323\1\0\1\324\2\0\1\152\46\0"+
    "\1\152\32\0\1\323\3\0\1\323\106\0\3\325\1\0"+
    "\1\325\1\0\1\326\12\0\1\155\71\0\3\325\1\0"+
    "\1\325\106\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\1\17\1\0\1\21\1\22\16\0\16\12\1\22"+
    "\7\12\44\0\1\333\13\0\2\334\1\0\2\166\44\0"+
    "\25\332\1\u010e\1\u010f\64\332\26\335\1\u0110\1\u0111\63\335"+
    "\1\0\10\12\1\u0112\1\12\2\0\2\12\1\0\1\12"+
    "\1\0\1\12\2\u0112\1\173\1\0\1\174\1\12\16\0"+
    "\5\12\1\u0112\1\12\1\u0112\1\12\1\u0112\3\12\1\u0112"+
    "\10\12\43\0\1\u0113\114\0\1\u0113\64\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\4\12\1\u0114\21\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\4\12\1\u0115"+
    "\21\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\16\12\1\u0116\7\12\17\0"+
    "\12\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\16\0\4\12\1\u0117\21\12\17\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\3\12\1\u0118\22\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\15\12\1\u0119"+
    "\10\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\1\u011a\25\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\3\12\1\u011b\22\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\6\12"+
    "\1\u011c\17\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\7\12\1\u011d\16\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\13\12\1\u011e\12\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\22\12\1\u011f\3\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\1\u0120"+
    "\25\12\17\0\12\12\2\0\2\12\1\0\1\12\1\0"+
    "\3\12\3\0\1\12\16\0\3\12\1\u0121\22\12\17\0"+
    "\12\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\16\0\12\12\1\u0122\13\12\17\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\7\12\1\u0123\16\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\12\12\1\u0124"+
    "\13\12\43\0\1\101\1\0\1\102\111\0\1\377\13\0"+
    "\2\u0100\1\0\2\253\44\0\25\376\1\u0125\1\u0126\64\376"+
    "\26\u0101\1\u0127\1\u0128\63\u0101\1\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\1\105\1\0\1\106\1\22"+
    "\16\0\16\12\1\22\7\12\16\0\25\u0104\1\u0129\1\u012a"+
    "\64\u0104\26\u0105\1\u012b\1\u012c\63\u0105\1\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\1\301\1\0\1\302"+
    "\1\22\16\0\16\12\1\22\7\12\16\0\26\u010c\1\u012d"+
    "\1\u012e\63\u010c\25\332\1\u012f\1\u0130\177\332\141\335\1\u0131"+
    "\1\u0132\63\335\1\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\1\173\1\0\1\174\1\12\16\0\26\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\5\12\1\u0133\20\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\20\12\1\u0134\5\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\4\12"+
    "\1\u0135\21\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\5\12\1\u0136\20\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\10\12\1\u0137\15\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\3\12\1\u0138\22\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\14\12"+
    "\1\u0139\11\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\2\12\1\u013a\23\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\5\12\1\u013b\20\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\12\12\1\u013c\13\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\2\12"+
    "\1\u013d\23\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\1\u013e\25\12\17\0"+
    "\12\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\16\0\4\12\1\u013f\21\12\16\0\25\376\1\u0140"+
    "\1\u0141\177\376\141\u0101\1\u0142\1\u0143\63\u0101\25\u0104\1\u0144"+
    "\1\u012a\177\u0104\141\u0105\1\u012b\1\u0145\63\u0105\141\u010c\1\u012d"+
    "\1\u0146\63\u010c\25\332\1\u0147\1\u0130\64\332\26\335\1\u0131"+
    "\1\u0147\63\335\1\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\6\12\1\u0148\17\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\6\12\1\u0149\17\12\17\0\12\12"+
    "\2\0\2\12\1\0\1\12\1\0\3\12\3\0\1\12"+
    "\16\0\1\12\1\u014a\24\12\17\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\1\12"+
    "\1\u014b\24\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\1\u014c\25\12\17\0"+
    "\12\12\2\0\2\12\1\0\1\12\1\0\3\12\3\0"+
    "\1\12\16\0\6\12\1\u014d\17\12\17\0\12\12\2\0"+
    "\2\12\1\0\1\12\1\0\3\12\3\0\1\12\16\0"+
    "\12\12\1\u014e\13\12\17\0\12\12\2\0\2\12\1\0"+
    "\1\12\1\0\3\12\3\0\1\12\16\0\12\12\1\u014f"+
    "\13\12\16\0\25\376\1\u0150\1\u0141\64\376\26\u0101\1\u0142"+
    "\1\u0150\63\u0101\25\u0104\1\u0151\1\u012a\64\u0104\26\u0105\1\u012b"+
    "\1\u0151\63\u0105\26\u010c\1\u012d\1\u0152\63\u010c\26\0\1\u0153"+
    "\13\0\2\u0154\1\0\2\u0155\45\0\12\12\2\0\2\12"+
    "\1\0\1\12\1\0\3\12\3\0\1\12\16\0\15\12"+
    "\1\u0156\10\12\17\0\12\12\2\0\2\12\1\0\1\12"+
    "\1\0\3\12\3\0\1\12\16\0\21\12\1\u0157\4\12"+
    "\17\0\12\12\2\0\2\12\1\0\1\12\1\0\3\12"+
    "\3\0\1\12\16\0\4\12\1\u0158\21\12\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\10\1\1\11\2\1\2\11\2\1\12\11"+
    "\32\1\4\11\4\1\1\11\20\1\2\11\1\1\5\11"+
    "\7\1\1\11\1\1\5\0\1\11\1\1\1\0\1\11"+
    "\1\0\2\1\2\11\3\1\1\11\6\1\2\11\31\1"+
    "\2\11\1\1\2\11\1\1\5\11\1\1\2\11\1\1"+
    "\1\0\3\1\1\11\12\1\2\0\1\11\1\1\2\0"+
    "\17\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\11"+
    "\1\0\2\1\2\0\27\1\4\11\1\0\2\1\1\11"+
    "\1\0\2\1\1\11\2\1\1\11\3\1\1\11\2\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\11\21\1\1\0"+
    "\2\1\13\0\15\1\7\0\12\1\3\11\1\0\1\11"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
static final class FragmentState {
  private final int oldState;
  private final int oldBraceBalance;
  private final FStringState containingFString;

  FragmentState(int state, int braceBalance, FStringState fStringState) {
    oldState = state;
    oldBraceBalance = braceBalance;
    containingFString = fStringState;
  }
}

void pushFStringFragment() {
  fragmentStates.push(new FragmentState(yystate(), braceBalance, fStringStates.peek()));
  braceBalance = 0;
  yybegin(FSTRING_FRAGMENT);
}

void popFStringFragment() {
  FragmentState state = fragmentStates.pop();
  braceBalance = state.oldBraceBalance;
  yybegin(state.oldState);
}

static final class FStringState {
  private final int oldState;
  private final String quotes;

  FStringState(int state, String quotes) {
    oldState = state;
    this.quotes = quotes;
  }
}

void pushFString() {
  final String prefixAndQuotes = yytext().toString();
  final int prefixLength = PyStringLiteralUtil.getPrefixLength(prefixAndQuotes);
  fStringStates.push(new FStringState(yystate(), prefixAndQuotes.substring(prefixLength)));
  yybegin(FSTRING);
}

boolean hasMatchingFStringStart(String endQuotes){
  for(int i = fStringStates.size() - 1; i >= 0; i--){
    final FStringState state = fStringStates.get(i);
    if (endQuotes.startsWith(state.quotes)){
      final int nestedNum = fStringStates.size() - i;
      for(int j = 0; j < nestedNum; j++) {
        popFString();
      }
      yybegin(state.oldState);
      final int unmatchedQuotes = endQuotes.length() - state.quotes.length();
      yypushback(unmatchedQuotes);
      return true;
    }
  }
  return false;
}

private void popFString() {
  final FStringState removedFString = fStringStates.pop();
  while (!fragmentStates.isEmpty() && fragmentStates.peek().containingFString == removedFString) {
    fragmentStates.pop();
  }
}

IElementType findFStringEndInStringLiteral(String stringLiteral, IElementType stringType){
    int i = 0;
    while(i < stringLiteral.length()) {
      final char c = stringLiteral.charAt(i);
      if (c == '\\') {
        i += 2;
        continue;
      }
      final int prefixLength = PyStringLiteralUtil.getPrefixLength(stringLiteral);
      final String nextThree = stringLiteral.substring(i, Math.min(stringLiteral.length(), i + 3));
      for(int j = fStringStates.size() - 1; j >= 0; j--) {
        final FStringState state = fStringStates.get(j);
        if (nextThree.startsWith(state.quotes)){
          if (i == 0) {
            final int nestedNum = fStringStates.size() - j;
            for(int k = 0; k < nestedNum; k++) {
              popFString();
            }
            yybegin(state.oldState);
            final int unmatched = stringLiteral.length() - state.quotes.length();
            yypushback(unmatched);
            return PyTokenTypes.FSTRING_END;
          }
          else {
            yypushback(stringLiteral.length() - i);
            return i == prefixLength ? PyTokenTypes.IDENTIFIER : stringType;
          }
        }
      }
      i++;
    }
    return stringType;
}

private final Stack<FragmentState> fragmentStates = new Stack<>();
private final Stack<FStringState> fStringStates = new Stack<>();

private int braceBalance = 0;

private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = Character.codePointAt(str, n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [375] { return PyTokenTypes.BAD_CHARACTER; }");
            { return PyTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 117: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] { return PyTokenTypes.INTEGER_LITERAL; }");
            { return PyTokenTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 118: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [317] { return PyTokenTypes.IDENTIFIER; }");
            { return PyTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 119: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT; }");
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 120: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [363] { return PyTokenTypes.DOT; }");
            { return PyTokenTypes.DOT;
            } 
            // fall through
          case 121: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [343] { return PyTokenTypes.MINUS; }");
            { return PyTokenTypes.MINUS;
            } 
            // fall through
          case 122: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;"+ZZ_NL+"                                 else return PyTokenTypes.SINGLE_QUOTED_STRING; }");
            { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 123: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { return PyTokenTypes.BACKSLASH; }");
            { return PyTokenTypes.BACKSLASH;
            } 
            // fall through
          case 124: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [357] { return PyTokenTypes.LBRACE; }");
            { return PyTokenTypes.LBRACE;
            } 
            // fall through
          case 125: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [358] { return PyTokenTypes.RBRACE; }");
            { return PyTokenTypes.RBRACE;
            } 
            // fall through
          case 126: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [365] { return PyTokenTypes.EQ; }");
            { return PyTokenTypes.EQ;
            } 
            // fall through
          case 127: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [353] { return PyTokenTypes.LPAR; }");
            { return PyTokenTypes.LPAR;
            } 
            // fall through
          case 128: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [354] { return PyTokenTypes.RPAR; }");
            { return PyTokenTypes.RPAR;
            } 
            // fall through
          case 129: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [355] { return PyTokenTypes.LBRACKET; }");
            { return PyTokenTypes.LBRACKET;
            } 
            // fall through
          case 130: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [356] { return PyTokenTypes.RBRACKET; }");
            { return PyTokenTypes.RBRACKET;
            } 
            // fall through
          case 131: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [361] { return PyTokenTypes.COLON; }");
            { return PyTokenTypes.COLON;
            } 
            // fall through
          case 132: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { return PyTokenTypes.SPACE; }");
            { return PyTokenTypes.SPACE;
            } 
            // fall through
          case 133: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { return PyTokenTypes.TAB; }");
            { return PyTokenTypes.TAB;
            } 
            // fall through
          case 134: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { return PyTokenTypes.FORMFEED; }");
            { return PyTokenTypes.FORMFEED;
            } 
            // fall through
          case 135: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK; }");
            { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 136: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [366] { return PyTokenTypes.SEMICOLON; }");
            { return PyTokenTypes.SEMICOLON;
            } 
            // fall through
          case 137: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [342] { return PyTokenTypes.PLUS; }");
            { return PyTokenTypes.PLUS;
            } 
            // fall through
          case 138: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [344] { return PyTokenTypes.MULT; }");
            { return PyTokenTypes.MULT;
            } 
            // fall through
          case 139: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [359] { return PyTokenTypes.AT; }");
            { return PyTokenTypes.AT;
            } 
            // fall through
          case 140: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [345] { return PyTokenTypes.DIV; }");
            { return PyTokenTypes.DIV;
            } 
            // fall through
          case 141: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [346] { return PyTokenTypes.PERC; }");
            { return PyTokenTypes.PERC;
            } 
            // fall through
          case 142: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [347] { return PyTokenTypes.AND; }");
            { return PyTokenTypes.AND;
            } 
            // fall through
          case 143: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [348] { return PyTokenTypes.OR; }");
            { return PyTokenTypes.OR;
            } 
            // fall through
          case 144: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [349] { return PyTokenTypes.XOR; }");
            { return PyTokenTypes.XOR;
            } 
            // fall through
          case 145: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [352] { return PyTokenTypes.GT; }");
            { return PyTokenTypes.GT;
            } 
            // fall through
          case 146: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [351] { return PyTokenTypes.LT; }");
            { return PyTokenTypes.LT;
            } 
            // fall through
          case 147: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [350] { return PyTokenTypes.TILDE; }");
            { return PyTokenTypes.TILDE;
            } 
            // fall through
          case 148: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [360] { return PyTokenTypes.COMMA; }");
            { return PyTokenTypes.COMMA;
            } 
            // fall through
          case 149: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [364] { return PyTokenTypes.TICK; }");
            { return PyTokenTypes.TICK;
            } 
            // fall through
          case 150: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [389] { yypushback(1); yybegin(YYINITIAL); }");
            { yypushback(1); yybegin(YYINITIAL);
            } 
            // fall through
          case 151: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { return PyTokenTypes.END_OF_LINE_COMMENT; }");
            { return PyTokenTypes.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 152: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [383] { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;"+ZZ_NL+"                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING; }");
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 153: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [277] { return PyTokenTypes.LINE_BREAK; }");
            { return PyTokenTypes.LINE_BREAK;
            } 
            // fall through
          case 154: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] { return PyTokenTypes.SINGLE_QUOTED_STRING; }");
            { return PyTokenTypes.SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 155: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { return PyTokenTypes.FSTRING_TEXT; }");
            { return PyTokenTypes.FSTRING_TEXT;
            } 
            // fall through
          case 156: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return hasMatchingFStringStart(yytext().toString()) ? PyTokenTypes.FSTRING_END : PyTokenTypes.FSTRING_TEXT; }");
            { return hasMatchingFStringStart(yytext().toString()) ? PyTokenTypes.FSTRING_END : PyTokenTypes.FSTRING_TEXT;
            } 
            // fall through
          case 157: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { pushFStringFragment(); return PyTokenTypes.FSTRING_FRAGMENT_START; }");
            { pushFStringFragment(); return PyTokenTypes.FSTRING_FRAGMENT_START;
            } 
            // fall through
          case 158: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { return findFStringEndInStringLiteral(yytext().toString(), PyTokenTypes.SINGLE_QUOTED_STRING); }");
            { return findFStringEndInStringLiteral(yytext().toString(), PyTokenTypes.SINGLE_QUOTED_STRING);
            } 
            // fall through
          case 159: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { braceBalance++; return PyTokenTypes.LBRACE; }");
            { braceBalance++; return PyTokenTypes.LBRACE;
            } 
            // fall through
          case 160: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { if (braceBalance == 0) { popFStringFragment(); return PyTokenTypes.FSTRING_FRAGMENT_END; }"+ZZ_NL+"        else { braceBalance--; return PyTokenTypes.RBRACE; } }");
            { if (braceBalance == 0) { popFStringFragment(); return PyTokenTypes.FSTRING_FRAGMENT_END; }
        else { braceBalance--; return PyTokenTypes.RBRACE; }
            } 
            // fall through
          case 161: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { return PyTokenTypes.FSTRING_FRAGMENT_TYPE_CONVERSION; }");
            { return PyTokenTypes.FSTRING_FRAGMENT_TYPE_CONVERSION;
            } 
            // fall through
          case 162: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { braceBalance++; return PyTokenTypes.LPAR; }");
            { braceBalance++; return PyTokenTypes.LPAR;
            } 
            // fall through
          case 163: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { braceBalance--; return PyTokenTypes.RPAR; }");
            { braceBalance--; return PyTokenTypes.RPAR;
            } 
            // fall through
          case 164: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { braceBalance++; return PyTokenTypes.LBRACKET; }");
            { braceBalance++; return PyTokenTypes.LBRACKET;
            } 
            // fall through
          case 165: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { braceBalance--; return PyTokenTypes.RBRACKET; }");
            { braceBalance--; return PyTokenTypes.RBRACKET;
            } 
            // fall through
          case 166: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { if (braceBalance == 0) { yybegin(FSTRING_FRAGMENT_FORMAT); return PyTokenTypes.FSTRING_FRAGMENT_FORMAT_START; }"+ZZ_NL+"        else { return PyTokenTypes.COLON; } }");
            { if (braceBalance == 0) { yybegin(FSTRING_FRAGMENT_FORMAT); return PyTokenTypes.FSTRING_FRAGMENT_FORMAT_START; }
        else { return PyTokenTypes.COLON; }
            } 
            // fall through
          case 167: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { return hasMatchingFStringStart(yytext().toString())? PyTokenTypes.FSTRING_END : PyTokenTypes.FSTRING_TEXT; }");
            { return hasMatchingFStringStart(yytext().toString())? PyTokenTypes.FSTRING_END : PyTokenTypes.FSTRING_TEXT;
            } 
            // fall through
          case 168: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [283] { return PyTokenTypes.FLOAT_LITERAL; }");
            { return PyTokenTypes.FLOAT_LITERAL;
            } 
            // fall through
          case 169: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [284] { return PyTokenTypes.IMAGINARY_LITERAL; }");
            { return PyTokenTypes.IMAGINARY_LITERAL;
            } 
            // fall through
          case 170: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [320] { return PyTokenTypes.MINUSEQ; }");
            { return PyTokenTypes.MINUSEQ;
            } 
            // fall through
          case 171: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [341] { return PyTokenTypes.RARROW; }");
            { return PyTokenTypes.RARROW;
            } 
            // fall through
          case 172: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;"+ZZ_NL+"return PyTokenTypes.DOCSTRING; }");
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 173: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [368] { IElementType type = findFStringEndInStringLiteral(yytext().toString(), PyTokenTypes.FSTRING_START);"+ZZ_NL+"                        if (type == PyTokenTypes.FSTRING_START) {"+ZZ_NL+"                          pushFString();"+ZZ_NL+"                        }"+ZZ_NL+"                        return type; }");
            { IElementType type = findFStringEndInStringLiteral(yytext().toString(), PyTokenTypes.FSTRING_START);
                        if (type == PyTokenTypes.FSTRING_START) {
                          pushFString();
                        }
                        return type;
            } 
            // fall through
          case 174: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [339] { return PyTokenTypes.NE; }");
            { return PyTokenTypes.NE;
            } 
            // fall through
          case 175: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [338] { return PyTokenTypes.EQEQ; }");
            { return PyTokenTypes.EQEQ;
            } 
            // fall through
          case 176: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [309] { return PyTokenTypes.OR_KEYWORD; }");
            { return PyTokenTypes.OR_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 62: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [305] { return PyTokenTypes.IN_KEYWORD; }");
            { return PyTokenTypes.IN_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 63: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { return PyTokenTypes.IS_KEYWORD; }");
            { return PyTokenTypes.IS_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { return PyTokenTypes.IF_KEYWORD; }");
            { return PyTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [319] { return PyTokenTypes.PLUSEQ; }");
            { return PyTokenTypes.PLUSEQ;
            } 
            // fall through
          case 181: break;
          case 66: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [322] { return PyTokenTypes.MULTEQ; }");
            { return PyTokenTypes.MULTEQ;
            } 
            // fall through
          case 182: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [334] { return PyTokenTypes.EXP; }");
            { return PyTokenTypes.EXP;
            } 
            // fall through
          case 183: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [323] { return PyTokenTypes.ATEQ; }");
            { return PyTokenTypes.ATEQ;
            } 
            // fall through
          case 184: break;
          case 69: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [325] { return PyTokenTypes.DIVEQ; }");
            { return PyTokenTypes.DIVEQ;
            } 
            // fall through
          case 185: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [335] { return PyTokenTypes.FLOORDIV; }");
            { return PyTokenTypes.FLOORDIV;
            } 
            // fall through
          case 186: break;
          case 71: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [326] { return PyTokenTypes.PERCEQ; }");
            { return PyTokenTypes.PERCEQ;
            } 
            // fall through
          case 187: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [327] { return PyTokenTypes.ANDEQ; }");
            { return PyTokenTypes.ANDEQ;
            } 
            // fall through
          case 188: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [328] { return PyTokenTypes.OREQ; }");
            { return PyTokenTypes.OREQ;
            } 
            // fall through
          case 189: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [329] { return PyTokenTypes.XOREQ; }");
            { return PyTokenTypes.XOREQ;
            } 
            // fall through
          case 190: break;
          case 75: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [337] { return PyTokenTypes.GE; }");
            { return PyTokenTypes.GE;
            } 
            // fall through
          case 191: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [333] { return PyTokenTypes.GTGT; }");
            { return PyTokenTypes.GTGT;
            } 
            // fall through
          case 192: break;
          case 77: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [336] { return PyTokenTypes.LE; }");
            { return PyTokenTypes.LE;
            } 
            // fall through
          case 193: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [340] { return PyTokenTypes.NE_OLD; }");
            { return PyTokenTypes.NE_OLD;
            } 
            // fall through
          case 194: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [332] { return PyTokenTypes.LTLT; }");
            { return PyTokenTypes.LTLT;
            } 
            // fall through
          case 195: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [387] { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING; }");
            { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 196: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [379] { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON; }");
            { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
            } 
            // fall through
          case 197: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;"+ZZ_NL+"                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING; }");
            { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 198: break;
          case 83: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;"+ZZ_NL+" yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING; }");
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 199: break;
          case 84: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [289] { return PyTokenTypes.AND_KEYWORD; }");
            { return PyTokenTypes.AND_KEYWORD;
            } 
            // fall through
          case 200: break;
          case 85: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [308] { return PyTokenTypes.NOT_KEYWORD; }");
            { return PyTokenTypes.NOT_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 86: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { return PyTokenTypes.DEL_KEYWORD; }");
            { return PyTokenTypes.DEL_KEYWORD;
            } 
            // fall through
          case 202: break;
          case 87: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [294] { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD; }");
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
            } 
            // fall through
          case 203: break;
          case 88: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [313] { return PyTokenTypes.TRY_KEYWORD; }");
            { return PyTokenTypes.TRY_KEYWORD;
            } 
            // fall through
          case 204: break;
          case 89: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [300] { return PyTokenTypes.FOR_KEYWORD; }");
            { return PyTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 205: break;
          case 90: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [321] { return PyTokenTypes.EXPEQ; }");
            { return PyTokenTypes.EXPEQ;
            } 
            // fall through
          case 206: break;
          case 91: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [324] { return PyTokenTypes.FLOORDIVEQ; }");
            { return PyTokenTypes.FLOORDIVEQ;
            } 
            // fall through
          case 207: break;
          case 92: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [330] { return PyTokenTypes.GTGTEQ; }");
            { return PyTokenTypes.GTGTEQ;
            } 
            // fall through
          case 208: break;
          case 93: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [331] { return PyTokenTypes.LTLTEQ; }");
            { return PyTokenTypes.LTLTEQ;
            } 
            // fall through
          case 209: break;
          case 94: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [385] { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;"+ZZ_NL+"                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING; }");
            { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 210: break;
          case 95: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [388] { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING; }");
            { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 211: break;
          case 96: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [287] { return PyTokenTypes.TRIPLE_QUOTED_STRING; }");
            { return PyTokenTypes.TRIPLE_QUOTED_STRING;
            } 
            // fall through
          case 212: break;
          case 97: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return findFStringEndInStringLiteral(yytext().toString(), PyTokenTypes.TRIPLE_QUOTED_STRING); }");
            { return findFStringEndInStringLiteral(yytext().toString(), PyTokenTypes.TRIPLE_QUOTED_STRING);
            } 
            // fall through
          case 213: break;
          case 98: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;"+ZZ_NL+" yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING; }");
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 214: break;
          case 99: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [297] { return PyTokenTypes.ELSE_KEYWORD; }");
            { return PyTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 100: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [296] { return PyTokenTypes.ELIF_KEYWORD; }");
            { return PyTokenTypes.ELIF_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 101: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [301] { return PyTokenTypes.FROM_KEYWORD; }");
            { return PyTokenTypes.FROM_KEYWORD;
            } 
            // fall through
          case 217: break;
          case 102: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { return PyTokenTypes.PASS_KEYWORD; }");
            { return PyTokenTypes.PASS_KEYWORD;
            } 
            // fall through
          case 218: break;
          case 103: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [311] { return PyTokenTypes.RAISE_KEYWORD; }");
            { return PyTokenTypes.RAISE_KEYWORD;
            } 
            // fall through
          case 219: break;
          case 104: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [291] { return PyTokenTypes.BREAK_KEYWORD; }");
            { return PyTokenTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 220: break;
          case 105: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD; }");
            { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
            } 
            // fall through
          case 221: break;
          case 106: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [315] { return PyTokenTypes.YIELD_KEYWORD; }");
            { return PyTokenTypes.YIELD_KEYWORD;
            } 
            // fall through
          case 222: break;
          case 107: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [314] { return PyTokenTypes.WHILE_KEYWORD; }");
            { return PyTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 223: break;
          case 108: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [290] { return PyTokenTypes.ASSERT_KEYWORD; }");
            { return PyTokenTypes.ASSERT_KEYWORD;
            } 
            // fall through
          case 224: break;
          case 109: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [298] { return PyTokenTypes.EXCEPT_KEYWORD; }");
            { return PyTokenTypes.EXCEPT_KEYWORD;
            } 
            // fall through
          case 225: break;
          case 110: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [312] { return PyTokenTypes.RETURN_KEYWORD; }");
            { return PyTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 226: break;
          case 111: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [307] { return PyTokenTypes.LAMBDA_KEYWORD; }");
            { return PyTokenTypes.LAMBDA_KEYWORD;
            } 
            // fall through
          case 227: break;
          case 112: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [304] { return PyTokenTypes.IMPORT_KEYWORD; }");
            { return PyTokenTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 228: break;
          case 113: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [302] { return PyTokenTypes.GLOBAL_KEYWORD; }");
            { return PyTokenTypes.GLOBAL_KEYWORD;
            } 
            // fall through
          case 229: break;
          case 114: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;"+ZZ_NL+"return PyTokenTypes.DOCSTRING; }");
            { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
            } 
            // fall through
          case 230: break;
          case 115: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [299] { return PyTokenTypes.FINALLY_KEYWORD; }");
            { return PyTokenTypes.FINALLY_KEYWORD;
            } 
            // fall through
          case 231: break;
          case 116: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [293] { return PyTokenTypes.CONTINUE_KEYWORD; }");
            { return PyTokenTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _PythonLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _PythonLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _PythonLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
