/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package org.intellij.lang.regexp;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.StringEscapesTokenTypes;
import com.intellij.psi.tree.IElementType;

import com.intellij.util.containers.IntArrayList;
import java.util.EnumSet;

import static java.lang.Boolean.*;
import static org.intellij.lang.regexp.RegExpCapability.*;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>regexp-lexer.flex</tt>
 */
class _RegExLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED = 2;
  public static final int EMBRACED = 4;
  public static final int QUANTIFIER = 6;
  public static final int NON_QUANTIFIER = 8;
  public static final int NEGATED_CLASS = 10;
  public static final int QUOTED_CLASS = 12;
  public static final int CLASS1 = 14;
  public static final int OPTIONS = 16;
  public static final int COMMENT = 18;
  public static final int NAMED_GROUP = 20;
  public static final int QUOTED_NAMED_GROUP = 22;
  public static final int PY_NAMED_GROUP_REF = 24;
  public static final int BRACKET_EXPRESSION = 26;
  public static final int MYSQL_CHAR_EXPRESSION = 28;
  public static final int MYSQL_CHAR_EQ_EXPRESSION = 30;
  public static final int EMBRACED_HEX = 32;
  public static final int CONDITIONAL1 = 34;
  public static final int CONDITIONAL2 = 36;
  public static final int CLASS2 = 38;
  public static final int PROP = 40;
  public static final int NAMED = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14272 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\141\1\24\45"+
    "\12\1\142\1\12\1\24\1\27\4\12\1\27\1\143\1\144\1\15\1\12\1\15\1\12\1\15\1"+
    "\144\1\70\3\12\1\145\1\1\1\146\1\114\2\1\1\114\5\12\1\26\1\147\1\12\1\150"+
    "\4\12\1\37\1\12\1\151\2\1\1\64\1\12\1\152\1\153\2\12\1\154\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\153\2\1\2\114\1\155\5\1\1\107\2\12\1\145\1\156\1\114"+
    "\2\1\1\157\1\12\1\160\1\41\2\12\1\37\1\1\2\12\1\145\1\1\1\161\1\41\1\12\1"+
    "\152\1\45\5\1\1\162\1\163\14\12\4\1\21\12\1\141\2\12\1\141\1\164\1\12\1\152"+
    "\3\12\1\165\1\166\1\167\1\124\1\166\7\1\1\170\1\1\1\124\6\1\1\171\1\172\1"+
    "\173\1\174\1\175\3\1\1\176\147\1\2\12\1\151\2\12\1\151\10\12\1\177\1\200\2"+
    "\12\1\133\3\12\1\201\1\1\1\12\1\112\4\202\4\1\1\126\35\1\1\203\2\1\1\204\1"+
    "\24\4\12\1\205\1\24\4\12\1\134\1\107\1\12\1\152\1\24\4\12\1\151\1\1\1\12\1"+
    "\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1\2\12\1\152"+
    "\20\12\1\124\1\12\1\206\1\1\2\12\1\151\1\126\1\12\1\152\4\12\1\37\2\1\1\207"+
    "\1\210\5\12\1\211\1\12\1\151\1\26\3\1\1\207\1\212\1\12\1\30\1\1\3\12\1\145"+
    "\1\210\2\12\1\145\1\1\1\114\1\1\1\213\1\41\1\12\1\37\1\12\1\112\1\1\1\12\1"+
    "\124\1\47\2\12\1\30\1\126\1\114\1\214\1\215\2\12\1\45\1\1\1\216\1\114\1\12"+
    "\1\217\3\12\1\220\1\221\1\222\1\27\1\65\1\223\1\224\1\202\2\12\1\134\1\37"+
    "\7\12\1\30\1\114\72\12\1\145\1\12\1\225\2\12\1\154\20\1\26\12\1\152\6\12\1"+
    "\76\2\1\1\112\1\226\1\55\1\227\1\230\6\12\1\15\1\1\1\157\25\12\1\152\1\1\4"+
    "\12\1\210\2\12\1\26\2\1\1\154\7\1\1\214\7\12\1\124\1\1\1\114\1\24\1\27\1\24"+
    "\1\27\1\231\4\12\1\151\1\232\1\233\2\1\1\234\1\12\1\13\1\235\2\152\2\1\7\12"+
    "\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\236\2\12\1\37\1\12\1\152"+
    "\2\12\1\237\3\1\11\12\1\152\1\114\2\12\1\237\1\12\1\154\2\12\1\26\3\12\1\145"+
    "\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\240\2\12\1\241\1\12\1\37\1\12\1\112"+
    "\1\12\1\151\4\1\1\12\1\242\1\12\1\37\1\12\1\76\4\1\3\12\1\243\4\1\1\70\1\244"+
    "\1\12\1\145\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1\12\1\153\1\1\3\12\1\37\1"+
    "\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1"+
    "\157\2\12\1\26\2\1\1\64\1\1\1\157\2\12\2\1\1\12\1\45\1\114\1\157\1\12\1\112"+
    "\1\64\1\1\2\12\1\245\1\157\2\12\1\30\1\246\1\247\2\1\1\12\1\21\1\154\5\1\1"+
    "\250\1\251\1\45\2\12\1\151\1\1\1\114\1\72\1\54\1\55\1\67\1\1\1\252\1\15\11"+
    "\1\3\12\1\153\1\253\1\114\2\1\3\12\1\1\1\254\1\114\12\1\2\12\1\151\2\1\1\255"+
    "\2\1\3\12\1\1\1\256\1\114\2\1\2\12\1\27\1\1\1\114\3\1\1\12\1\76\1\1\1\114"+
    "\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1\12\1\151\1\1\1\70\1\114"+
    "\1\1\1\210\1\12\67\1\71\12\1\76\16\1\14\12\1\145\53\1\2\12\1\151\75\1\44\12"+
    "\1\112\33\1\43\12\1\45\1\12\1\151\1\114\6\1\1\12\1\152\1\1\3\12\1\1\1\145"+
    "\1\114\1\157\1\257\1\12\67\1\4\12\1\153\1\70\3\1\1\157\4\1\1\70\1\1\76\12"+
    "\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124\1\45\1\76\66\1\5\12\1"+
    "\214\3\12\1\144\1\260\1\261\1\262\3\12\1\263\1\264\1\12\1\265\1\266\1\35\24"+
    "\12\1\267\1\12\1\35\1\134\1\12\1\134\1\12\1\214\1\12\1\214\1\151\1\12\1\151"+
    "\1\12\1\55\1\12\1\55\1\12\1\270\3\271\14\12\1\153\3\1\4\12\1\145\1\114\112"+
    "\1\1\262\1\12\1\272\1\273\1\274\1\275\1\276\1\277\1\300\1\154\1\301\1\154"+
    "\24\1\55\12\1\112\2\1\103\12\1\153\15\12\1\152\150\12\1\15\25\1\41\12\1\152"+
    "\36\1");

  /* The ZZ_CMAP_A table has 3104 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\10\0\2\70\1\102\1\0\1\70\1\102\22\0\1\14\1\101\1\0\1\77\1\16\1\0\1\76\1\73"+
    "\1\2\1\3\1\20\1\21\1\66\1\13\1\1\1\0\1\52\3\65\4\64\2\60\1\75\1\0\1\72\1\57"+
    "\1\56\1\17\1\0\2\30\1\41\1\36\1\50\1\51\1\31\1\67\1\43\1\100\1\31\1\47\1\74"+
    "\1\53\1\55\1\45\1\61\1\54\1\34\1\100\1\46\1\37\2\33\1\100\1\32\1\6\1\10\1"+
    "\7\1\23\1\12\1\0\1\25\1\26\1\40\1\35\2\25\1\27\1\67\1\42\1\100\1\71\1\46\1"+
    "\100\1\24\1\100\1\44\1\100\1\24\1\33\1\24\1\63\2\33\1\62\1\100\1\31\1\4\1"+
    "\22\1\5\14\0\1\11\12\0\1\11\4\0\1\11\5\0\27\11\1\0\12\11\4\0\14\11\16\0\5"+
    "\11\7\0\1\11\1\0\1\11\1\0\5\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0\3\11"+
    "\1\0\1\11\1\0\4\11\1\0\23\11\1\0\13\11\10\0\6\11\1\0\26\11\2\0\1\11\6\0\10"+
    "\11\10\0\13\11\5\0\3\11\15\0\12\15\4\0\6\11\1\0\1\11\17\0\2\11\7\0\2\11\12"+
    "\15\3\11\2\0\2\11\1\0\16\11\15\0\11\11\13\0\1\11\16\0\12\15\6\11\4\0\2\11"+
    "\4\0\1\11\5\0\6\11\4\0\1\11\11\0\1\11\3\0\1\11\7\0\11\11\7\0\5\11\1\0\10\11"+
    "\6\0\26\11\3\0\1\11\2\0\1\11\7\0\12\11\4\0\12\15\1\11\4\0\10\11\2\0\2\11\2"+
    "\0\26\11\1\0\7\11\1\0\1\11\3\0\4\11\3\0\1\11\20\0\1\11\15\0\2\11\1\0\1\11"+
    "\5\0\6\11\4\0\2\11\1\0\2\11\1\0\2\11\1\0\2\11\17\0\4\11\1\0\1\11\7\0\12\15"+
    "\2\0\3\11\20\0\11\11\1\0\2\11\1\0\2\11\1\0\5\11\3\0\1\11\2\0\1\11\30\0\1\11"+
    "\13\0\10\11\2\0\1\11\3\0\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11"+
    "\1\0\2\11\3\0\2\11\3\0\3\11\3\0\14\11\13\0\10\11\1\0\2\11\10\0\3\11\5\0\1"+
    "\11\4\0\10\11\1\0\6\11\1\0\5\11\3\0\1\11\3\0\2\11\15\0\13\11\2\0\1\11\6\0"+
    "\3\11\10\0\1\11\12\0\6\11\5\0\22\11\3\0\10\11\1\0\11\11\1\0\1\11\2\0\7\11"+
    "\11\0\1\11\1\0\2\11\14\0\12\15\7\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11"+
    "\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\0\2\11\11"+
    "\0\1\11\2\0\5\11\1\0\1\11\11\0\12\15\2\0\14\11\1\0\24\11\13\0\5\11\22\0\7"+
    "\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0\1\11\1\0\6\11\1\0\1"+
    "\11\5\0\1\11\2\0\13\11\1\0\15\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\1"+
    "\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\16\11\2\0\6\11\2\0\15\11\2\0\1"+
    "\11\1\0\10\11\7\0\15\11\1\0\6\11\23\0\1\11\4\0\1\11\3\0\5\11\2\0\22\11\1\0"+
    "\1\11\5\0\17\11\1\0\16\11\2\0\5\11\13\0\14\11\13\0\1\11\15\0\7\11\7\0\16\11"+
    "\15\0\2\11\12\15\3\0\3\11\11\0\4\11\1\0\4\11\3\0\2\11\11\0\10\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\6\11\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2"+
    "\0\6\11\5\0\1\11\15\0\1\11\2\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6"+
    "\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11\4"+
    "\0\2\11\13\0\5\11\6\0\4\11\3\0\2\11\14\0\10\11\7\0\10\11\1\0\7\11\6\0\2\11"+
    "\12\0\5\11\5\0\2\11\3\0\7\11\6\0\3\11\12\15\2\11\13\0\11\11\2\0\27\11\2\0"+
    "\7\11\1\0\3\11\1\0\4\11\1\0\4\11\2\0\6\11\3\0\1\11\1\0\1\11\2\0\5\11\1\0\12"+
    "\11\12\15\5\11\1\0\3\11\1\0\10\11\4\0\7\11\3\0\1\11\3\0\2\11\1\0\1\11\3\0"+
    "\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\0\3\11\3\0\6\11\2\0\6\11\2\0\6\11\11\0"+
    "\7\11\4\0\5\11\3\0\5\11\5\0\1\11\1\0\10\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\12\11\6\0\12\11\2\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0\14\11\1"+
    "\0\16\11\1\0\2\11\1\0\2\11\1\0\10\11\6\0\4\11\4\0\16\11\2\0\1\11\1\0\14\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\1\0\2\11\12\0\10\11\6\0\6\11\1\0\3\11\1\0\12\11"+
    "\3\0\1\11\12\0\4\11\13\0\12\15\1\11\1\0\1\11\3\0\7\11\1\0\1\11\1\0\4\11\1"+
    "\0\17\11\1\0\2\11\14\0\3\11\7\0\4\11\11\0\2\11\1\0\1\11\20\0\4\11\10\0\1\11"+
    "\13\0\10\11\5\0\3\11\2\0\1\11\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11"+
    "\1\0\21\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0\14\11\1\0\4\11\1\0\5\11\1\0\1\11"+
    "\3\0\14\11\2\0\13\11\1\0\10\11\2\0\22\15\1\0\2\11\1\0\1\11\2\0\1\11\1\0\12"+
    "\11\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1"+
    "\0\1\11\2\0\4\11\1\0\7\11\1\0\4\11\1\0\4\11\1\0\1\11\1\0\12\11\1\0\5\11\1"+
    "\0\3\11\1\0\5\11\1\0\5\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\14\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\2\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\0\1\32\2\33\1\34"+
    "\1\35\1\36\1\34\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\26\1\45\1\46\1\47\1\50\3\47\1\26"+
    "\1\47\1\26\1\47\1\51\1\52\2\12\2\26\2\40"+
    "\1\53\1\54\1\12\1\55\1\56\1\57\1\2\1\60"+
    "\1\61\1\24\1\62\1\63\3\0\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\12\1\74"+
    "\1\75\2\76\1\77\1\100\1\12\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\12\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\0"+
    "\1\122\2\26\1\123\2\51\1\0\1\124\1\125\1\12"+
    "\1\66\1\65\1\71\1\73\2\12\1\75\2\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\2\26\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\0\1\136\1\137\1\140\1\141\1\142\1\143"+
    "\1\0\1\144\1\145\1\146\2\0\1\147\6\0\1\150"+
    "\1\151\1\152\1\153\2\154\1\103\1\155\1\156\1\157"+
    "\1\160\1\161\1\162\1\163\1\164\1\165\1\0\1\166"+
    "\1\150\1\153\2\154\1\103\1\156\1\160\2\26\1\167"+
    "\1\170\1\171\1\172\1\0\1\173\1\174\1\175\1\0"+
    "\1\176\1\0\1\177\4\0\1\150\2\154\1\103\1\200"+
    "\1\160\1\201\1\202\1\150\2\154\1\103\1\200\1\160"+
    "\2\26\1\203\1\204\1\205\1\150\1\0\1\206\1\160"+
    "\1\150\1\206\1\160\2\26\1\0\2\207\1\210\2\26"+
    "\1\0\4\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u05c2"+
    "\0\u0605\0\u05c2\0\u0648\0\u05c2\0\u068b\0\u05c2\0\u06ce\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2"+
    "\0\u0711\0\u05c2\0\u05c2\0\u0754\0\u05c2\0\u0797\0\u05c2\0\u07da"+
    "\0\u05c2\0\u05c2\0\u0711\0\u05c2\0\u081d\0\u05c2\0\u0860\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u08a3\0\u08e6\0\u05c2\0\u0929\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb"+
    "\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u05c2\0\u0d9c\0\u05c2\0\u05c2\0\u05c2\0\u0ddf"+
    "\0\u05c2\0\u05c2\0\u0bc7\0\u05c2\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u05c2\0\u05c2\0\u05c2\0\u0f2e\0\u05c2\0\u05c2\0\u05c2\0\u05c2"+
    "\0\u0f71\0\u0fb4\0\u05c2\0\u05c2\0\u0ff7\0\u05c2\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u103a\0\u05c2\0\u107d\0\u05c2\0\u10c0\0\u1103\0\u05c2"+
    "\0\u1146\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u05c2\0\u1189\0\u05c2\0\u11cc\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u120f\0\u1252\0\u05c2\0\u05c2\0\u1295\0\u0929\0\u0929"+
    "\0\u0929\0\u0929\0\u0929\0\u12d8\0\u0929\0\u131b\0\u0929\0\u0929"+
    "\0\u0929\0\u135e\0\u0929\0\u13a1\0\u0929\0\u13e4\0\u1427\0\u0929"+
    "\0\u146a\0\u14ad\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u14f0\0\u05c2\0\u05c2\0\u1533\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u1576\0\u05c2\0\u05c2\0\u05c2\0\u15b9\0\u15fc\0\u05c2"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u1814\0\u1857\0\u189a\0\u05c2\0\u18dd\0\u05c2"+
    "\0\u1920\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u1963\0\u05c2"+
    "\0\u19a6\0\u0929\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u1bbe\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u1c01\0\u05c2\0\u1c44\0\u05c2\0\u1c87\0\u1cca\0\u1d0d"+
    "\0\u1d50\0\u1d93\0\u1dd6\0\u05c2\0\u05c2\0\u05c2\0\u1e19\0\u05c2"+
    "\0\u05c2\0\u1e5c\0\u1e9f\0\u0929\0\u0929\0\u0929\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u1fab\0\u05c2\0\u1fee"+
    "\0\u0929\0\u0929\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u05c2\0\u0929"+
    "\0\u0929\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u05c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\3\27\1\40\1\27\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\44\27\1\47\6\27\1\50\2\27\1\47"+
    "\10\27\1\51\72\27\5\52\1\53\3\52\1\54\11\52"+
    "\1\46\26\54\1\52\3\54\1\52\1\55\1\52\3\54"+
    "\3\52\1\54\1\52\1\54\2\52\1\54\3\52\1\54"+
    "\7\52\1\53\7\52\1\56\34\52\1\56\5\52\1\56"+
    "\3\52\2\56\1\57\14\52\10\0\1\60\4\0\1\27"+
    "\34\0\1\27\5\0\1\27\3\0\3\27\37\0\1\61"+
    "\57\0\10\62\1\63\72\62\6\64\1\65\1\66\1\67"+
    "\3\64\1\70\53\64\1\70\11\64\1\70\3\71\1\72"+
    "\5\71\1\73\1\71\1\74\10\71\26\73\1\71\3\73"+
    "\3\71\3\73\3\71\1\73\1\71\1\73\2\71\1\73"+
    "\1\75\2\71\1\73\2\71\102\12\1\0\10\71\3\76"+
    "\3\71\1\76\5\71\26\76\1\71\3\76\1\77\2\71"+
    "\3\76\3\71\1\76\1\71\1\76\2\71\1\76\3\71"+
    "\1\76\12\71\3\76\3\71\1\76\5\71\26\76\1\71"+
    "\3\76\3\71\3\76\3\71\1\76\1\71\1\76\1\71"+
    "\1\100\1\76\3\71\1\76\5\71\1\72\4\71\3\76"+
    "\3\71\1\76\5\71\26\76\1\71\3\76\3\71\3\76"+
    "\3\71\1\76\1\71\1\76\2\71\1\76\3\71\1\76"+
    "\2\71\11\101\1\54\11\101\1\46\26\54\1\101\3\54"+
    "\1\102\2\101\3\54\3\101\1\54\1\101\1\54\1\102"+
    "\1\101\1\54\1\103\2\101\1\54\2\101\1\104\1\105"+
    "\7\104\1\106\12\104\26\106\1\104\3\106\3\104\3\106"+
    "\3\104\1\106\1\104\1\106\2\104\1\106\3\104\1\106"+
    "\2\104\11\107\1\110\12\107\26\110\1\107\3\110\1\107"+
    "\1\111\1\107\3\110\3\107\1\110\1\107\1\110\2\107"+
    "\1\110\3\107\1\110\2\107\4\0\1\112\76\0\2\27"+
    "\1\113\5\27\1\114\3\27\1\40\6\27\1\46\44\27"+
    "\1\47\6\27\1\50\2\27\1\47\3\71\1\72\4\71"+
    "\1\115\2\76\2\71\1\56\1\76\5\71\12\76\1\116"+
    "\1\117\12\76\1\56\3\76\1\120\1\71\1\56\3\76"+
    "\2\56\1\71\1\76\1\71\1\76\1\71\1\121\1\76"+
    "\3\71\1\76\2\71\6\27\1\122\1\123\1\124\2\27"+
    "\1\125\1\126\53\27\1\127\5\27\1\130\1\131\2\27"+
    "\1\127\4\52\1\132\3\52\1\133\21\52\1\134\1\52"+
    "\1\134\4\52\1\134\3\52\1\134\1\52\1\134\3\52"+
    "\1\134\20\52\1\134\12\52\1\132\3\52\1\133\72\52"+
    "\122\0\1\135\73\0\1\136\4\0\1\137\34\0\1\137"+
    "\5\0\1\137\3\0\2\137\1\140\37\0\1\141\57\0"+
    "\1\142\3\143\1\144\1\145\1\143\1\145\1\143\2\142"+
    "\1\146\1\147\1\142\6\143\2\150\1\151\1\152\3\153"+
    "\5\154\1\155\3\156\2\157\3\160\1\161\1\162\1\163"+
    "\1\154\1\161\2\142\1\164\1\165\1\166\1\167\2\164"+
    "\1\142\1\170\1\147\1\171\2\142\1\161\2\142\1\172"+
    "\1\161\1\142\1\147\50\0\1\173\34\0\2\54\5\0"+
    "\5\54\6\0\32\54\2\0\6\54\1\0\1\54\1\0"+
    "\1\54\2\0\1\54\3\0\1\54\17\0\1\56\34\0"+
    "\1\56\5\0\1\56\3\0\2\56\22\0\1\174\76\0"+
    "\1\175\21\0\1\176\33\0\1\175\15\0\1\177\14\0"+
    "\1\200\13\0\1\201\35\0\1\202\32\0\1\73\12\0"+
    "\26\73\1\0\3\73\3\0\3\73\3\0\1\73\1\0"+
    "\1\73\2\0\1\73\3\0\1\73\13\0\1\74\12\0"+
    "\26\74\1\0\3\74\3\0\3\74\3\0\1\74\1\0"+
    "\1\74\2\0\1\74\3\0\1\74\12\0\7\76\5\0"+
    "\32\76\2\0\6\76\1\0\1\76\1\0\1\76\2\0"+
    "\1\76\3\0\1\76\11\0\1\203\74\0\1\204\102\0"+
    "\1\204\5\0\1\205\74\0\1\204\7\0\1\206\1\0"+
    "\1\206\1\0\1\207\6\0\26\206\1\207\3\206\2\0"+
    "\1\207\3\206\2\207\1\0\1\206\1\0\1\206\2\0"+
    "\1\206\3\0\1\206\61\0\1\204\25\0\2\54\5\0"+
    "\5\54\6\0\32\54\1\0\1\204\6\54\1\0\1\54"+
    "\1\0\1\54\2\0\1\54\3\0\1\54\11\0\1\210"+
    "\47\0\1\204\30\0\1\211\17\0\2\212\1\0\1\212"+
    "\4\0\2\212\1\0\2\212\6\0\3\212\5\0\1\212"+
    "\3\0\2\212\34\0\1\213\52\0\1\214\1\215\7\0"+
    "\6\142\1\143\1\142\1\143\2\142\1\146\10\142\2\150"+
    "\1\161\1\216\3\161\5\154\1\155\3\156\2\157\3\160"+
    "\1\161\1\162\1\163\2\161\2\142\1\164\1\165\1\166"+
    "\1\167\2\164\1\142\1\170\1\142\1\161\2\142\1\161"+
    "\2\142\1\172\1\161\10\142\1\143\1\142\1\217\2\220"+
    "\1\221\3\220\5\142\2\222\1\223\1\224\3\223\5\225"+
    "\1\226\3\227\2\230\3\231\1\223\1\232\1\233\2\223"+
    "\2\142\1\234\1\235\1\236\1\237\2\234\1\142\1\240"+
    "\1\142\1\223\2\142\1\223\2\142\1\172\1\223\2\142"+
    "\10\0\7\76\5\0\24\76\1\241\5\76\2\0\6\76"+
    "\1\0\1\76\1\0\1\76\2\0\1\76\3\0\1\76"+
    "\12\0\7\76\5\0\24\76\1\242\5\76\2\0\6\76"+
    "\1\0\1\76\1\0\1\76\2\0\1\76\3\0\1\76"+
    "\5\0\1\243\102\0\1\244\100\0\1\245\21\0\1\246"+
    "\33\0\1\245\15\0\1\245\5\0\6\142\3\143\2\142"+
    "\1\146\1\247\7\142\3\150\1\216\3\161\5\154\1\155"+
    "\3\156\2\157\3\160\1\161\1\162\1\163\2\161\2\142"+
    "\1\164\1\165\1\166\1\167\2\164\1\142\1\170\1\247"+
    "\1\161\2\142\1\161\2\142\1\172\1\161\1\142\1\247"+
    "\76\0\1\250\6\0\1\251\17\0\1\252\22\0\1\253"+
    "\10\0\1\254\1\255\12\0\1\256\1\257\1\0\1\260"+
    "\1\261\1\262\1\0\1\263\6\0\1\264\102\0\1\265"+
    "\2\0\1\266\4\0\1\137\34\0\1\137\5\0\1\137"+
    "\3\0\2\137\1\267\21\0\1\270\2\0\1\271\4\0"+
    "\1\272\34\0\1\272\5\0\1\272\3\0\2\272\32\0"+
    "\1\273\34\0\1\273\5\0\1\273\3\0\2\273\1\274"+
    "\20\0\1\275\102\0\1\276\53\0\1\277\3\0\2\277"+
    "\4\0\1\300\1\301\7\0\103\302\52\0\1\303\11\0"+
    "\1\304\1\303\67\0\1\305\5\0\1\305\3\0\2\305"+
    "\21\0\1\306\20\0\2\307\1\0\1\307\4\0\2\307"+
    "\1\0\2\307\6\0\3\307\5\0\1\307\3\0\2\307"+
    "\21\0\1\310\20\0\2\311\1\0\1\311\4\0\2\311"+
    "\1\0\2\311\6\0\3\311\5\0\1\311\3\0\2\311"+
    "\107\0\1\312\1\313\16\0\1\314\104\0\1\206\1\0"+
    "\1\206\1\0\1\207\6\0\26\206\1\207\3\206\2\0"+
    "\1\207\3\206\2\207\1\0\1\206\1\0\1\206\2\0"+
    "\1\206\3\0\1\206\7\0\1\315\17\0\2\212\1\0"+
    "\1\212\4\0\2\212\1\0\2\212\6\0\3\212\5\0"+
    "\1\212\3\0\2\212\74\0\1\316\12\0\1\317\6\0"+
    "\1\320\5\0\1\276\53\0\1\277\3\0\2\277\21\0"+
    "\1\276\3\0\7\76\5\0\32\76\2\0\1\321\3\76"+
    "\2\321\1\0\1\76\1\0\1\76\2\0\1\76\3\0"+
    "\1\76\2\0\10\302\7\322\5\302\32\322\2\302\6\322"+
    "\1\302\1\322\1\302\1\322\2\302\1\322\3\302\1\322"+
    "\2\302\10\0\7\76\5\0\26\76\1\323\3\76\2\0"+
    "\4\76\1\324\1\323\1\0\1\76\1\0\1\76\2\0"+
    "\1\76\3\0\1\76\12\0\7\76\5\0\26\76\1\325"+
    "\3\76\2\0\1\325\3\76\2\325\1\0\1\76\1\0"+
    "\1\76\2\0\1\76\3\0\1\76\6\0\1\306\3\0"+
    "\7\76\5\0\1\76\2\326\1\76\1\326\4\76\2\326"+
    "\1\76\2\326\6\76\3\326\3\76\2\0\1\326\3\76"+
    "\2\326\1\0\1\76\1\0\1\76\2\0\1\76\3\0"+
    "\1\76\6\0\1\310\3\0\7\76\5\0\1\76\2\327"+
    "\1\76\1\327\4\76\2\327\1\76\2\327\6\76\3\327"+
    "\3\76\2\0\1\327\3\76\2\327\1\0\1\76\1\0"+
    "\1\76\2\0\1\76\3\0\1\76\12\0\7\76\5\0"+
    "\25\76\1\330\4\76\2\0\6\76\1\0\1\76\1\0"+
    "\1\76\2\0\1\76\3\0\1\76\12\0\7\76\5\0"+
    "\30\76\1\331\1\76\2\0\6\76\1\0\1\76\1\0"+
    "\1\76\2\0\1\76\3\0\1\76\60\0\1\261\1\332"+
    "\12\0\1\333\67\0\1\334\21\0\1\335\1\0\3\336"+
    "\1\0\77\336\5\0\1\337\102\0\1\265\2\0\1\266"+
    "\4\0\1\267\34\0\1\267\5\0\1\267\3\0\2\267"+
    "\22\0\1\340\102\0\1\341\2\0\1\342\4\0\1\272"+
    "\34\0\1\272\5\0\1\272\3\0\2\272\22\0\1\343"+
    "\7\0\1\273\34\0\1\273\5\0\1\273\3\0\2\273"+
    "\1\344\21\0\1\345\7\0\1\346\34\0\1\346\5\0"+
    "\1\346\3\0\2\346\44\0\1\347\66\0\1\350\44\0"+
    "\1\351\3\0\2\351\67\0\1\352\5\0\1\352\3\0"+
    "\2\352\67\0\1\353\11\0\2\353\67\0\1\354\11\0"+
    "\2\354\67\0\1\355\5\0\1\355\3\0\2\355\42\0"+
    "\2\356\1\0\1\356\4\0\2\356\1\0\2\356\6\0"+
    "\3\356\5\0\1\356\3\0\2\356\42\0\2\357\1\0"+
    "\1\357\4\0\2\357\1\0\2\357\6\0\3\357\5\0"+
    "\1\357\3\0\2\357\74\0\1\360\21\0\1\361\11\0"+
    "\7\76\5\0\26\76\1\362\3\76\2\0\1\362\3\76"+
    "\2\362\1\0\1\76\1\0\1\76\2\0\1\76\3\0"+
    "\1\76\12\0\7\76\5\0\26\76\1\363\3\76\2\0"+
    "\4\76\2\363\1\0\1\76\1\0\1\76\2\0\1\76"+
    "\3\0\1\76\12\0\7\76\5\0\26\76\1\364\3\76"+
    "\2\0\4\76\2\364\1\0\1\76\1\0\1\76\2\0"+
    "\1\76\3\0\1\76\12\0\7\76\5\0\26\76\1\365"+
    "\3\76\2\0\1\365\3\76\2\365\1\0\1\76\1\0"+
    "\1\76\2\0\1\76\3\0\1\76\12\0\7\76\5\0"+
    "\1\76\2\366\1\76\1\366\4\76\2\366\1\76\2\366"+
    "\6\76\3\366\3\76\2\0\1\366\3\76\2\366\1\0"+
    "\1\76\1\0\1\76\2\0\1\76\3\0\1\76\12\0"+
    "\7\76\5\0\1\76\2\367\1\76\1\367\4\76\2\367"+
    "\1\76\2\367\6\76\3\367\3\76\2\0\1\367\3\76"+
    "\2\367\1\0\1\76\1\0\1\76\2\0\1\76\3\0"+
    "\1\76\12\0\7\76\5\0\17\76\1\370\12\76\2\0"+
    "\6\76\1\0\1\76\1\0\1\76\2\0\1\76\3\0"+
    "\1\76\12\0\7\76\5\0\10\76\1\371\21\76\2\0"+
    "\6\76\1\0\1\76\1\0\1\76\2\0\1\76\3\0"+
    "\1\76\2\0\3\336\1\372\77\336\5\0\1\373\102\0"+
    "\1\343\7\0\1\344\34\0\1\344\5\0\1\344\3\0"+
    "\2\344\22\0\1\374\7\0\1\346\34\0\1\346\5\0"+
    "\1\346\3\0\2\346\22\0\1\153\155\0\1\351\3\0"+
    "\2\351\22\0\1\375\44\0\1\376\5\0\1\376\3\0"+
    "\2\376\67\0\1\375\5\0\1\375\3\0\2\375\67\0"+
    "\1\377\11\0\2\377\42\0\2\u0100\1\0\1\u0100\4\0"+
    "\2\u0100\1\0\2\u0100\6\0\3\u0100\5\0\1\u0100\3\0"+
    "\2\u0100\25\0\7\76\5\0\26\76\1\u0101\3\76\2\0"+
    "\1\u0101\3\76\2\u0101\1\0\1\76\1\0\1\76\2\0"+
    "\1\76\3\0\1\76\12\0\7\76\5\0\26\76\1\u0102"+
    "\3\76\2\0\4\76\2\u0102\1\0\1\76\1\0\1\76"+
    "\2\0\1\76\3\0\1\76\12\0\7\76\5\0\1\76"+
    "\2\u0103\1\76\1\u0103\4\76\2\u0103\1\76\2\u0103\6\76"+
    "\3\u0103\3\76\2\0\1\u0103\3\76\2\u0103\1\0\1\76"+
    "\1\0\1\76\2\0\1\76\3\0\1\76\12\0\7\76"+
    "\5\0\27\76\1\u0104\2\76\2\0\6\76\1\0\1\76"+
    "\1\0\1\76\2\0\1\76\3\0\1\76\12\0\7\76"+
    "\5\0\17\76\1\u0105\12\76\2\0\6\76\1\0\1\76"+
    "\1\0\1\76\2\0\1\76\3\0\1\76\7\0\1\375"+
    "\44\0\1\u0106\5\0\1\u0106\3\0\2\u0106\42\0\2\u0107"+
    "\1\0\1\u0107\4\0\2\u0107\1\0\2\u0107\6\0\3\u0107"+
    "\5\0\1\u0107\3\0\2\u0107\25\0\7\76\5\0\1\76"+
    "\2\u0108\1\76\1\u0108\4\76\2\u0108\1\76\2\u0108\6\76"+
    "\3\u0108\3\76\2\0\1\u0108\3\76\2\u0108\1\0\1\76"+
    "\1\0\1\76\2\0\1\76\3\0\1\76\12\0\7\76"+
    "\5\0\24\76\1\u0109\5\76\2\0\6\76\1\0\1\76"+
    "\1\0\1\76\2\0\1\76\3\0\1\76\12\0\7\76"+
    "\5\0\31\76\1\u010a\2\0\6\76\1\0\1\76\1\0"+
    "\1\76\2\0\1\76\3\0\1\76\7\0\1\375\105\0"+
    "\7\76\5\0\27\76\1\u010b\2\76\2\0\6\76\1\0"+
    "\1\76\1\0\1\76\2\0\1\76\3\0\1\76\12\0"+
    "\7\76\5\0\32\76\1\u010c\1\u010d\6\76\1\0\1\76"+
    "\1\0\1\76\2\0\1\76\3\0\1\76\61\0\1\u010d"+
    "\24\0\1\u010e\13\0\1\u010d\34\0\1\u010d\5\0\1\u010d"+
    "\3\0\2\u010d\32\0\1\u010f\34\0\1\u010f\5\0\1\u010f"+
    "\3\0\2\u010f\32\0\1\u0110\34\0\1\u0110\5\0\1\u0110"+
    "\3\0\2\u0110\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8911];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\1\14\0\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\11\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\3\11\2\1\1\11\1\1\4\11\20\1\1\11"+
    "\1\1\3\11\1\1\2\11\1\1\1\11\1\1\3\0"+
    "\3\11\1\1\4\11\2\1\2\11\1\1\4\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\12\11\1\0"+
    "\1\11\1\1\3\11\1\1\1\0\2\11\25\1\10\11"+
    "\1\0\2\11\1\1\3\11\1\0\3\11\2\0\1\11"+
    "\6\0\1\1\3\11\3\1\1\11\1\1\1\11\1\1"+
    "\5\11\1\0\1\11\11\1\4\11\1\0\3\11\1\0"+
    "\1\11\1\0\1\11\4\0\2\1\3\11\1\1\2\11"+
    "\10\1\4\11\1\0\1\11\6\1\1\0\1\11\4\1"+
    "\1\0\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    final IntArrayList states = new IntArrayList();

    // This was an idea to use the regex implementation for XML schema regexes (which use a slightly different syntax)
    // as well, but is currently unfinished as it requires to tweak more places than just the lexer.
    private boolean xmlSchemaMode;

    int capturingGroupCount = 0;

    private Boolean allowDanglingMetacharacters;
    private boolean allowOmitNumbersInQuantifiers;
    private boolean allowOmitBothNumbersInQuantifiers;
    private boolean allowNestedCharacterClasses;
    private boolean allowOctalNoLeadingZero;
    private boolean allowHexDigitClass;
    private boolean allowEmptyCharacterClass;
    private boolean allowHorizontalWhitespaceClass;
    private boolean allowPosixBracketExpressions;
    private boolean allowTransformationEscapes;
    private boolean allowExtendedUnicodeCharacter;
    private boolean allowOneHexCharEscape;
    private boolean allowMysqlBracketExpressions;
    private boolean allowPcreBackReferences;
    private boolean allowPcreConditions;
    private int maxOctal = 0777;
    private int minOctalDigits = 1;
    private boolean whitespaceInClass;

    _RegExLexer(EnumSet<RegExpCapability> capabilities) {
      this((java.io.Reader)null);
      this.xmlSchemaMode = capabilities.contains(XML_SCHEMA_MODE);
      if (capabilities.contains(DANGLING_METACHARACTERS)) this.allowDanglingMetacharacters = TRUE;
      if (capabilities.contains(NO_DANGLING_METACHARACTERS)) this.allowDanglingMetacharacters = FALSE;
      this.allowOmitNumbersInQuantifiers = capabilities.contains(OMIT_NUMBERS_IN_QUANTIFIERS);
      this.allowOmitBothNumbersInQuantifiers = capabilities.contains(OMIT_BOTH_NUMBERS_IN_QUANTIFIERS);
      this.allowNestedCharacterClasses = capabilities.contains(NESTED_CHARACTER_CLASSES);
      this.allowOctalNoLeadingZero = capabilities.contains(OCTAL_NO_LEADING_ZERO);
      this.commentMode = capabilities.contains(COMMENT_MODE);
      this.allowHexDigitClass = capabilities.contains(ALLOW_HEX_DIGIT_CLASS);
      this.allowHorizontalWhitespaceClass = capabilities.contains(ALLOW_HORIZONTAL_WHITESPACE_CLASS);
      this.allowEmptyCharacterClass = capabilities.contains(ALLOW_EMPTY_CHARACTER_CLASS);
      this.allowPosixBracketExpressions = capabilities.contains(POSIX_BRACKET_EXPRESSIONS);
      this.allowTransformationEscapes = capabilities.contains(TRANSFORMATION_ESCAPES);
      this.allowMysqlBracketExpressions = capabilities.contains(MYSQL_BRACKET_EXPRESSIONS);
      this.allowPcreBackReferences = capabilities.contains(PCRE_BACK_REFERENCES);
      this.allowPcreConditions = capabilities.contains(PCRE_CONDITIONS);
      if (capabilities.contains(MAX_OCTAL_177)) {
        maxOctal = 0177;
      }
      else if (capabilities.contains(MAX_OCTAL_377)) {
        maxOctal = 0377;
      }
      if (capabilities.contains(MIN_OCTAL_2_DIGITS)) {
        minOctalDigits = 2;
      }
      else if (capabilities.contains(MIN_OCTAL_3_DIGITS)) {
        minOctalDigits = 3;
      }
      this.allowExtendedUnicodeCharacter = capabilities.contains(EXTENDED_UNICODE_CHARACTER);
      this.allowOneHexCharEscape = capabilities.contains(ONE_HEX_CHAR_ESCAPE);
      this.whitespaceInClass = capabilities.contains(WHITESPACE_IN_CLASS);
    }

    private void yypushstate(int state) {
        states.add(yystate());
        yybegin(state);
    }

    private void yypopstate() {
        final int state = states.remove(states.size() - 1);
        yybegin(state);
    }

    private void handleOptions() {
      final String o = yytext().toString();
      if (o.contains("x")) {
        commentMode = !o.startsWith("-");
      }
    }

    // tracks whether the lexer is in comment mode, i.e. whether whitespace is not significant and whether to ignore
    // text after '#' till EOL
    boolean commentMode = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RegExLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yypopstate(); return RegExpTT.COMMENT;
            } 
            // fall through
          case 137: break;
          case 2: 
            { return RegExpTT.CHARACTER;
            } 
            // fall through
          case 138: break;
          case 3: 
            { return RegExpTT.DOT;
            } 
            // fall through
          case 139: break;
          case 4: 
            { capturingGroupCount++; return RegExpTT.GROUP_BEGIN;
            } 
            // fall through
          case 140: break;
          case 5: 
            { return RegExpTT.GROUP_END;
            } 
            // fall through
          case 141: break;
          case 6: 
            { if (allowDanglingMetacharacters != TRUE) { yypushstate(QUANTIFIER); return RegExpTT.LBRACE; } return RegExpTT.CHARACTER;
            } 
            // fall through
          case 142: break;
          case 7: 
            { return (allowDanglingMetacharacters != FALSE) ? RegExpTT.CHARACTER : RegExpTT.RBRACE;
            } 
            // fall through
          case 143: break;
          case 8: 
            { yypushstate(CLASS1); return RegExpTT.CLASS_BEGIN;
            } 
            // fall through
          case 144: break;
          case 9: 
            { return allowDanglingMetacharacters == FALSE ? RegExpTT.CLASS_END : RegExpTT.CHARACTER;
            } 
            // fall through
          case 145: break;
          case 10: 
            { return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            } 
            // fall through
          case 146: break;
          case 11: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CHARACTER;
            } 
            // fall through
          case 147: break;
          case 12: 
            { return RegExpTT.DOLLAR;
            } 
            // fall through
          case 148: break;
          case 13: 
            { return RegExpTT.QUEST;
            } 
            // fall through
          case 149: break;
          case 14: 
            { return RegExpTT.STAR;
            } 
            // fall through
          case 150: break;
          case 15: 
            { return RegExpTT.PLUS;
            } 
            // fall through
          case 151: break;
          case 16: 
            { return RegExpTT.UNION;
            } 
            // fall through
          case 152: break;
          case 17: 
            { return RegExpTT.CARET;
            } 
            // fall through
          case 153: break;
          case 18: 
            { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CTRL_CHARACTER;
            } 
            // fall through
          case 154: break;
          case 19: 
            { if (commentMode) { yypushstate(COMMENT); } else return RegExpTT.CHARACTER;
            } 
            // fall through
          case 155: break;
          case 20: 
            { yypopstate(); yypushback(1);
            } 
            // fall through
          case 156: break;
          case 21: 
            { yypopstate(); return RegExpTT.RBRACE;
            } 
            // fall through
          case 157: break;
          case 22: 
            { return RegExpTT.NAME;
            } 
            // fall through
          case 158: break;
          case 23: 
            { return RegExpTT.EQ;
            } 
            // fall through
          case 159: break;
          case 24: 
            { return RegExpTT.NUMBER;
            } 
            // fall through
          case 160: break;
          case 25: 
            { return RegExpTT.COMMA;
            } 
            // fall through
          case 161: break;
          case 26: 
            { yybegin(CLASS1); return RegExpTT.CARET;
            } 
            // fall through
          case 162: break;
          case 27: 
            { states.set(states.size() - 1, CLASS2); return RegExpTT.CHARACTER;
            } 
            // fall through
          case 163: break;
          case 28: 
            { yypushback(1); yybegin(CLASS2);
            } 
            // fall through
          case 164: break;
          case 29: 
            { yybegin(CLASS2); if (allowNestedCharacterClasses) { yypushstate(CLASS1); return RegExpTT.CLASS_BEGIN; } return RegExpTT.CHARACTER;
            } 
            // fall through
          case 165: break;
          case 30: 
            { if (allowEmptyCharacterClass) { yypopstate(); return RegExpTT.CLASS_END; } yybegin(CLASS2); return RegExpTT.CHARACTER;
            } 
            // fall through
          case 166: break;
          case 31: 
            { if (commentMode && whitespaceInClass) return com.intellij.psi.TokenType.WHITE_SPACE; yypushback(1); yybegin(CLASS2);
            } 
            // fall through
          case 167: break;
          case 32: 
            { yybegin(YYINITIAL); yypushback(1);
            } 
            // fall through
          case 168: break;
          case 33: 
            { yybegin(YYINITIAL); return RegExpTT.GROUP_END;
            } 
            // fall through
          case 169: break;
          case 34: 
            { handleOptions(); return RegExpTT.OPTIONS_ON;
            } 
            // fall through
          case 170: break;
          case 35: 
            { handleOptions(); return RegExpTT.OPTIONS_OFF;
            } 
            // fall through
          case 171: break;
          case 36: 
            { yybegin(YYINITIAL); return RegExpTT.COLON;
            } 
            // fall through
          case 172: break;
          case 37: 
            { yybegin(YYINITIAL); return RegExpTT.GT;
            } 
            // fall through
          case 173: break;
          case 38: 
            { yybegin(YYINITIAL); return RegExpTT.QUOTE;
            } 
            // fall through
          case 174: break;
          case 39: 
            { return RegExpTT.BAD_CHARACTER;
            } 
            // fall through
          case 175: break;
          case 40: 
            { return allowMysqlBracketExpressions ? RegExpTT.NAME : RegExpTT.BAD_CHARACTER;
            } 
            // fall through
          case 176: break;
          case 41: 
            { yypopstate(); return (yycharat(-1) == 'u') ? StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN : RegExpTT.BAD_HEX_VALUE;
            } 
            // fall through
          case 177: break;
          case 42: 
            { yybegin(CONDITIONAL2); return RegExpTT.GROUP_BEGIN;
            } 
            // fall through
          case 178: break;
          case 43: 
            { if (allowNestedCharacterClasses) { yypushstate(CLASS1); return RegExpTT.CLASS_BEGIN; } return RegExpTT.CHARACTER;
            } 
            // fall through
          case 179: break;
          case 44: 
            { yypopstate(); return RegExpTT.CLASS_END;
            } 
            // fall through
          case 180: break;
          case 45: 
            { return RegExpTT.MINUS;
            } 
            // fall through
          case 181: break;
          case 46: 
            { return (commentMode && whitespaceInClass) ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CHARACTER;
            } 
            // fall through
          case 182: break;
          case 47: 
            { return (commentMode && whitespaceInClass) ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CTRL_CHARACTER;
            } 
            // fall through
          case 183: break;
          case 48: 
            { if (commentMode && whitespaceInClass) yypushstate(COMMENT); else return RegExpTT.CHARACTER;
            } 
            // fall through
          case 184: break;
          case 49: 
            { yypopstate(); yypushstate(EMBRACED); return RegExpTT.LBRACE;
            } 
            // fall through
          case 185: break;
          case 50: 
            { yypopstate(); return RegExpTT.CATEGORY_SHORT_HAND;
            } 
            // fall through
          case 186: break;
          case 51: 
            { yybegin(OPTIONS); return RegExpTT.SET_OPTIONS;
            } 
            // fall through
          case 187: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypushstate(NEGATED_CLASS); return RegExpTT.CLASS_BEGIN;
            } 
            // fall through
          case 188: break;
          case 53: 
            { return RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 189: break;
          case 54: 
            { return RegExpTT.ESC_CHARACTER;
            } 
            // fall through
          case 190: break;
          case 55: 
            { return (allowDanglingMetacharacters != TRUE) ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 191: break;
          case 56: 
            { return (allowDanglingMetacharacters == FALSE) ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 192: break;
          case 57: 
            { return (yystate() == CLASS2) ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 193: break;
          case 58: 
            { return commentMode ? RegExpTT.ESC_CTRL_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 194: break;
          case 59: 
            { return RegExpTT.ESC_CTRL_CHARACTER;
            } 
            // fall through
          case 195: break;
          case 60: 
            { return RegExpTT.BOUNDARY;
            } 
            // fall through
          case 196: break;
          case 61: 
            { return RegExpTT.CHAR_CLASS;
            } 
            // fall through
          case 197: break;
          case 62: 
            { if (xmlSchemaMode) return RegExpTT.CHAR_CLASS; else return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            } 
            // fall through
          case 198: break;
          case 63: 
            { yypushstate(PROP); return RegExpTT.PROPERTY;
            } 
            // fall through
          case 199: break;
          case 64: 
            { return allowTransformationEscapes ? RegExpTT.CHAR_CLASS : StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            } 
            // fall through
          case 200: break;
          case 65: 
            { return (allowOctalNoLeadingZero ? RegExpTT.OCT_CHAR : RegExpTT.BAD_OCT_VALUE);
            } 
            // fall through
          case 201: break;
          case 66: 
            { yypushstate(NAMED); return RegExpTT.NAMED_CHARACTER;
            } 
            // fall through
          case 202: break;
          case 67: 
            { String text = yytext().toString().substring(1);
                                if (allowOctalNoLeadingZero) {
                                  if (Integer.parseInt(text) <= capturingGroupCount && yystate() != CLASS2) return RegExpTT.BACKREF;
                                  int i = 0;
                                  int value = 0;
                                  for (; i < text.length(); i++) {
                                    char c = text.charAt(i);
                                    if (c > '7') break;
                                    value = value * 8 + (c - '0');
                                  }
                                  if (i > 0) {
                                    yypushback(text.length() - i);
                                    if (value > maxOctal) {
                                      yypushback(1);
                                      return RegExpTT.BAD_OCT_VALUE;
                                    }
                                    if (minOctalDigits > i && yystate() != CLASS2) {
                                      return RegExpTT.BAD_OCT_VALUE;
                                    }
                                    return RegExpTT.OCT_CHAR;
                                  }
                                  return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
                                }
                                else {
                                  if (yystate() == CLASS2) {
                                    yypushback(yylength() - 2);
                                    return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
                                  }
                                  /* java.util.regex.Pattern says about backrefs:
                                      "In this class, \1 through \9 are always interpreted as back references,
                                      and a larger number is accepted as a back reference if at least that many
                                      subexpressions exist at that point in the regular expression, otherwise the
                                      parser will drop digits until the number is smaller or equal to the existing
                                      number of groups or it is one digit."
                                  */
                                  while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {
                                    yypushback(1);
                                  }
                                  return RegExpTT.BACKREF;
                                }
            } 
            // fall through
          case 203: break;
          case 68: 
            { yypushstate(QUOTED); return RegExpTT.QUOTE_BEGIN;
            } 
            // fall through
          case 204: break;
          case 69: 
            { return RegExpTT.BAD_HEX_VALUE;
            } 
            // fall through
          case 205: break;
          case 70: 
            { return allowTransformationEscapes ? RegExpTT.CHAR_CLASS : StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
            } 
            // fall through
          case 206: break;
          case 71: 
            { return (allowHexDigitClass || allowHorizontalWhitespaceClass ? RegExpTT.CHAR_CLASS : StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN);
            } 
            // fall through
          case 207: break;
          case 72: 
            { return commentMode ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 208: break;
          case 73: 
            { yypopstate(); return RegExpTT.QUOTE_END;
            } 
            // fall through
          case 209: break;
          case 74: 
            { yypopstate(); return RegExpTT.ESC_CHARACTER;
            } 
            // fall through
          case 210: break;
          case 75: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(CLASS2); if (allowMysqlBracketExpressions) { yypushback(1); } else if (allowNestedCharacterClasses) { yypushstate(CLASS1); return RegExpTT.CLASS_BEGIN; } else { return RegExpTT.CHARACTER; }
            } 
            // fall through
          case 211: break;
          case 76: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(CLASS2); if (allowNestedCharacterClasses) { yypushstate(NEGATED_CLASS); return RegExpTT.CLASS_BEGIN; } return RegExpTT.CHARACTER;
            } 
            // fall through
          case 212: break;
          case 77: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(CLASS2); if (allowPosixBracketExpressions) { yypushback(1); } else if (allowNestedCharacterClasses) { yypushstate(CLASS1); return RegExpTT.CLASS_BEGIN; } else { return RegExpTT.CHARACTER; }
            } 
            // fall through
          case 213: break;
          case 78: 
            { yybegin(CLASS2); return allowEmptyCharacterClass ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 214: break;
          case 79: 
            { yybegin(CLASS2); return RegExpTT.ESC_CHARACTER;
            } 
            // fall through
          case 215: break;
          case 80: 
            { yypushstate(QUOTED_CLASS); return RegExpTT.QUOTE_BEGIN;
            } 
            // fall through
          case 216: break;
          case 81: 
            { yybegin(CLASS2); return RegExpTT.BRACKET_EXPRESSION_END;
            } 
            // fall through
          case 217: break;
          case 82: 
            { yybegin(CLASS2); return RegExpTT.MYSQL_CHAR_END;
            } 
            // fall through
          case 218: break;
          case 83: 
            { yybegin(CLASS2); return RegExpTT.MYSQL_CHAR_EQ_END;
            } 
            // fall through
          case 219: break;
          case 84: 
            { yybegin(CONDITIONAL2); return RegExpTT.ANGLE_BRACKET_CONDITION_BEGIN;
            } 
            // fall through
          case 220: break;
          case 85: 
            { yybegin(CONDITIONAL2); return RegExpTT.QUOTED_CONDITION_BEGIN;
            } 
            // fall through
          case 221: break;
          case 86: 
            { yybegin(YYINITIAL); return RegExpTT.ANGLE_BRACKET_CONDITION_END;
            } 
            // fall through
          case 222: break;
          case 87: 
            { yybegin(YYINITIAL); return RegExpTT.QUOTED_CONDITION_END;
            } 
            // fall through
          case 223: break;
          case 88: 
            { char c = yycharat(1);
                          if (allowPosixBracketExpressions && c == ':') {
                            yybegin(BRACKET_EXPRESSION);
                            return RegExpTT.BRACKET_EXPRESSION_BEGIN;
                          } else if (allowMysqlBracketExpressions && c == '=') {
                            yybegin(MYSQL_CHAR_EQ_EXPRESSION);
                            return RegExpTT.MYSQL_CHAR_EQ_BEGIN;
                          } else if (allowMysqlBracketExpressions && c == '.') {
                            yybegin(MYSQL_CHAR_EXPRESSION);
                            return RegExpTT.MYSQL_CHAR_BEGIN;
                          } else {
                            yypushback(1);
                            if (allowNestedCharacterClasses) {
                              yypushstate(CLASS1);
                              return RegExpTT.CLASS_BEGIN;
                            } else {
                              return RegExpTT.CHARACTER;
                            }
                          }
            } 
            // fall through
          case 224: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowNestedCharacterClasses) { yypushstate(NEGATED_CLASS); return RegExpTT.CLASS_BEGIN; } return RegExpTT.CHARACTER;
            } 
            // fall through
          case 225: break;
          case 90: 
            { return (commentMode && whitespaceInClass) ? RegExpTT.ESC_CTRL_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 226: break;
          case 91: 
            { if (allowNestedCharacterClasses) return RegExpTT.ANDAND; else yypushback(1); return RegExpTT.CHARACTER;
            } 
            // fall through
          case 227: break;
          case 92: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yybegin(CONDITIONAL1); return RegExpTT.CONDITIONAL;
            } 
            // fall through
          case 228: break;
          case 93: 
            { return RegExpTT.PCRE_BRANCH_RESET;
            } 
            // fall through
          case 229: break;
          case 94: 
            { return RegExpTT.ATOMIC_GROUP;
            } 
            // fall through
          case 230: break;
          case 95: 
            { return RegExpTT.POS_LOOKAHEAD;
            } 
            // fall through
          case 231: break;
          case 96: 
            { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_NAMED_GROUP;
            } 
            // fall through
          case 232: break;
          case 97: 
            { yybegin(QUOTED_NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_QUOTED_NAMED_GROUP;
            } 
            // fall through
          case 233: break;
          case 98: 
            { return RegExpTT.NON_CAPT_GROUP;
            } 
            // fall through
          case 234: break;
          case 99: 
            { yybegin(NAMED_GROUP); return RegExpTT.PCRE_RECURSIVE_NAMED_GROUP_REF;
            } 
            // fall through
          case 235: break;
          case 100: 
            { return RegExpTT.NEG_LOOKAHEAD;
            } 
            // fall through
          case 236: break;
          case 101: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return (allowDanglingMetacharacters != TRUE) ? RegExpTT.LBRACE : RegExpTT.CHARACTER;
            } 
            // fall through
          case 237: break;
          case 102: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypushstate(QUANTIFIER); return RegExpTT.LBRACE;
            } 
            // fall through
          case 238: break;
          case 103: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowOmitBothNumbersInQuantifiers || allowDanglingMetacharacters != TRUE) { yypushstate(QUANTIFIER); return RegExpTT.LBRACE; } else return RegExpTT.CHARACTER;
            } 
            // fall through
          case 239: break;
          case 104: 
            { return allowPcreBackReferences ? RegExpTT.BACKREF : StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
            } 
            // fall through
          case 240: break;
          case 105: 
            { yybegin(NAMED_GROUP); return RegExpTT.RUBY_NAMED_GROUP_CALL;
            } 
            // fall through
          case 241: break;
          case 106: 
            { yybegin(QUOTED_NAMED_GROUP); return RegExpTT.RUBY_QUOTED_NAMED_GROUP_CALL;
            } 
            // fall through
          case 242: break;
          case 107: 
            { if (xmlSchemaMode) { yypushback(1); return RegExpTT.CHAR_CLASS; } else return RegExpTT.CTRL;
            } 
            // fall through
          case 243: break;
          case 108: 
            { return RegExpTT.OCT_CHAR;
            } 
            // fall through
          case 244: break;
          case 109: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { if (allowExtendedUnicodeCharacter) yypushstate(EMBRACED_HEX); else return RegExpTT.BAD_HEX_VALUE;
            } 
            // fall through
          case 245: break;
          case 110: 
            { if (allowOneHexCharEscape) { return RegExpTT.HEX_CHAR; } else { yypushback(1); return RegExpTT.BAD_HEX_VALUE; }
            } 
            // fall through
          case 246: break;
          case 111: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { if (allowExtendedUnicodeCharacter) yypushstate(EMBRACED_HEX); else return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
            } 
            // fall through
          case 247: break;
          case 112: 
            { yypushback(yylength() - 2); return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
            } 
            // fall through
          case 248: break;
          case 113: 
            { yybegin(NAMED_GROUP); return RegExpTT.RUBY_NAMED_GROUP_REF;
            } 
            // fall through
          case 249: break;
          case 114: 
            { yybegin(QUOTED_NAMED_GROUP); return RegExpTT.RUBY_QUOTED_NAMED_GROUP_REF;
            } 
            // fall through
          case 250: break;
          case 115: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return RegExpTT.CHARACTER;
            } 
            // fall through
          case 251: break;
          case 116: 
            { yypopstate(); return (yycharat(-1) == 'u') ? RegExpTT.UNICODE_CHAR : RegExpTT.HEX_CHAR;
            } 
            // fall through
          case 252: break;
          case 117: 
            { yybegin(YYINITIAL); return RegExpTT.POS_LOOKAHEAD;
            } 
            // fall through
          case 253: break;
          case 118: 
            { yybegin(YYINITIAL); return RegExpTT.NEG_LOOKAHEAD;
            } 
            // fall through
          case 254: break;
          case 119: 
            { yybegin(PY_NAMED_GROUP_REF); return RegExpTT.PYTHON_NAMED_GROUP_REF;
            } 
            // fall through
          case 255: break;
          case 120: 
            { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.PYTHON_NAMED_GROUP;
            } 
            // fall through
          case 256: break;
          case 121: 
            { return RegExpTT.POS_LOOKBEHIND;
            } 
            // fall through
          case 257: break;
          case 122: 
            { return RegExpTT.NEG_LOOKBEHIND;
            } 
            // fall through
          case 258: break;
          case 123: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowDanglingMetacharacters != TRUE) { yypushstate(QUANTIFIER); return RegExpTT.LBRACE; } else { yypushstate(NON_QUANTIFIER); return RegExpTT.CHARACTER; }
            } 
            // fall through
          case 259: break;
          case 124: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowDanglingMetacharacters == TRUE) { if (allowOmitBothNumbersInQuantifiers) yypushstate(NON_QUANTIFIER); return RegExpTT.CHARACTER; } else { yypushstate(QUANTIFIER); return RegExpTT.LBRACE; }
            } 
            // fall through
          case 260: break;
          case 125: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowOmitNumbersInQuantifiers || allowDanglingMetacharacters != TRUE) { yypushstate(QUANTIFIER); return RegExpTT.LBRACE; } else return RegExpTT.CHARACTER;
            } 
            // fall through
          case 261: break;
          case 126: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return RegExpTT.ESC_CHARACTER;
            } 
            // fall through
          case 262: break;
          case 127: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return allowOmitBothNumbersInQuantifiers ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 263: break;
          case 128: 
            { return RegExpTT.HEX_CHAR;
            } 
            // fall through
          case 264: break;
          case 129: 
            { yybegin(YYINITIAL); return RegExpTT.POS_LOOKBEHIND;
            } 
            // fall through
          case 265: break;
          case 130: 
            { yybegin(YYINITIAL); return RegExpTT.NEG_LOOKBEHIND;
            } 
            // fall through
          case 266: break;
          case 131: 
            { return RegExpTT.COMMENT;
            } 
            // fall through
          case 267: break;
          case 132: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (allowDanglingMetacharacters != TRUE) { yypushstate(QUANTIFIER); return RegExpTT.LBRACE; } else if (allowOmitNumbersInQuantifiers) yypushstate(NON_QUANTIFIER); return RegExpTT.CHARACTER;
            } 
            // fall through
          case 268: break;
          case 133: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return allowOmitNumbersInQuantifiers ? RegExpTT.ESC_CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
            } 
            // fall through
          case 269: break;
          case 134: 
            { if (allowOctalNoLeadingZero) yypushback(1); return RegExpTT.OCT_CHAR;
            } 
            // fall through
          case 270: break;
          case 135: 
            { return RegExpTT.UNICODE_CHAR;
            } 
            // fall through
          case 271: break;
          case 136: 
            { return allowPcreConditions ? RegExpTT.PCRE_CONDITION : RegExpTT.NAME;
            } 
            // fall through
          case 272: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
