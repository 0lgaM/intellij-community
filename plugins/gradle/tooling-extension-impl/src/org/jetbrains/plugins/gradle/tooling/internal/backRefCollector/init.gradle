/*
 * Copyright 2000-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.jetbrains.plugins.gradle.tooling.internal.backRefCollector.GradleJavacReferenceIndexWriterHolder
import org.jetbrains.plugins.gradle.tooling.internal.backRefCollector.ReferenceIndexJavacPlugin

apply plugin: BackRefCollectorGradlePlugin

initscript {
  dependencies {
    classpath files([${EXTENSIONS_JARS_PATH}])
  }
}

@SuppressWarnings("GrPackage")
class BackRefCollectorGradlePlugin implements Plugin<Gradle> {
  @Override
  void apply(Gradle gradle) {
    gradle.buildStarted {
      GradleJavacReferenceIndexWriterHolder.initialize()
    }
    gradle.buildFinished {
      GradleJavacReferenceIndexWriterHolder.closeIfNeed(false)
    }
    gradle.allprojects { project ->
      Action<JavaCompile> javaCompilerPluginInstaller =
        new Action<JavaCompile>() {
          @Override
          void execute(JavaCompile task) {
            def args = task.options.compilerArgs
            args.add("-processorpath")
            args.add("${JAVAC_PLUGIN_PATH}")
            args.add("-Xplugin:" + ReferenceIndexJavacPlugin.PLUGIN_NAME)
          }
        }

      def javaCompileTasks = project.getTasks().withType(JavaCompile.class)
      javaCompileTasks.all(javaCompilerPluginInstaller)
      javaCompileTasks.whenTaskAdded(javaCompilerPluginInstaller)
    }
  }
}