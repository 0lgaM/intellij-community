// Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.jetbrains.plugins.groovy.lang.highlighting

import com.intellij.codeInspection.InspectionProfileEntry
import com.intellij.testFramework.LightProjectDescriptor
import org.jetbrains.annotations.NotNull
import org.jetbrains.plugins.groovy.GroovyLightProjectDescriptor
import org.jetbrains.plugins.groovy.codeInspection.assignment.GroovyAssignabilityCheckInspection
import org.jetbrains.plugins.groovy.codeInspection.bugs.GroovyAccessibilityInspection
import org.jetbrains.plugins.groovy.codeInspection.untypedUnresolvedAccess.GrUnresolvedAccessInspection

class GrLatestHighlightingTest extends GrHighlightingTestBase {
  @NotNull
  @Override
  protected LightProjectDescriptor getProjectDescriptor() {
    return GroovyLightProjectDescriptor.GROOVY_LATEST_REAL_JDK
  }

  @Override
  InspectionProfileEntry[] getCustomInspections() {
    [new GroovyAssignabilityCheckInspection(), new GrUnresolvedAccessInspection(), new GroovyAccessibilityInspection()]
  }

  void 'test IDEA-184690'() {
    testHighlighting '''\
import groovy.transform.CompileStatic

@CompileStatic
def com() {
    BigDecimal[] c = [2, 3]
    c == [2,3] as BigDecimal[] 
}
'''
  }

  void 'test IDEA-184690-2'() {
    testHighlighting '''\
import groovy.transform.CompileStatic

@CompileStatic
def com() {
    new Object() == 1
}
'''
  }

  void 'test IDEA-184690-3'() {
    testHighlighting '''\
import groovy.transform.CompileStatic

@CompileStatic
def com() {
    new Thread[1] == new Object[1]
}
'''
  }

  void 'test IDEA-185371'() {
    testHighlighting '''\
import groovy.transform.CompileStatic

@CompileStatic
def com() {
    Map<String, Integer> correct = [:].withDefault({ 0 })
}
'''
  }

  void 'test IDEA-185371-2'() {
    testHighlighting '''\
import groovy.transform.CompileStatic

static <K,V> Map<K, V> getMap() {
  return new HashMap<K,V>()
}

@CompileStatic
def com() {
    Map<String, Integer> correct = getMap().withDefault({ 0 })
}
'''
  }

  void 'test IDEA-185371-J'() {
    myFixture.configureByText('Box.java',
     '''\
import java.util.HashMap;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
class Box {
    static <K,V> Map<K, V> getMap() {
        return new HashMap<>();
    }
    static <U, V> Map<U, V> bar(Map<U, V> m) {
        return new HashMap<U,V>();
    }


    void com() {
        Map<String, Integer> correct = bar(getMap());
    }
}
''')

    myFixture.enableInspections(customInspections)
    myFixture.testHighlighting(true, true, true)
  }

  void 'test IDEA-185758'() {
    testHighlighting '''\
import groovy.transform.CompileStatic

interface A {}

class B implements A {}

class Box<T> {

   public  <U extends T> void register(Class<U> clazz, Closure<? extends U> closure) {

  }
}


@CompileStatic
def method(Box<A> box) {
    box.register(B) { param -> new B() }
}

'''
  }

}
