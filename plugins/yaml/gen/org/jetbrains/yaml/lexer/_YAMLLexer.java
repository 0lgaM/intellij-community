/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.jetbrains.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.yaml.YAMLTokenTypes;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>yaml.flex</tt>
 */
public class _YAMLLexer implements FlexLexer, YAMLTokenTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BRACES = 2;
  public static final int VALUE = 4;
  public static final int VALUE_OR_KEY = 6;
  public static final int VALUE_BRACE = 8;
  public static final int INDENT_VALUE = 10;
  public static final int BS_HEADER_TAIL = 12;
  public static final int ANCHOR_MODE = 14;
  public static final int ALIAS_MODE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  0,  0,  3,  3,  4,  4,  5,  5,  6,  6, 
     7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\7\2\32\1\1\22\0\1\13\1\30\1\21\1\5\1\26\1\17\1\35\1\22\2\26\1"+
    "\36\1\33\1\3\1\12\2\26\12\24\1\6\1\26\1\31\1\26\1\14\1\4\1\27\6\23\24\25\1"+
    "\34\1\20\1\11\1\0\1\26\1\2\6\23\24\25\1\15\1\37\1\16\1\26\6\0\1\32\32\0\1"+
    "\32\77\0\12\24\46\0\12\24\14\0\12\24\20\0\12\24\6\0\12\24\6\0\13\32\35\0\2"+
    "\32\5\0\1\32\57\0\1\32\26\0\12\24\16\0\62\24");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\4\2\1\14"+
    "\2\2\1\15\1\1\1\4\2\2\1\12\1\2\1\1"+
    "\1\4\4\2\1\1\1\4\2\2\1\16\1\17\1\20"+
    "\1\2\1\21\1\22\1\23\7\0\1\1\1\0\1\24"+
    "\1\0\2\25\2\26\2\11\5\0\1\27\2\0\1\30"+
    "\1\0\2\31\4\0\1\32\1\33\2\15\1\1\1\0"+
    "\1\24\3\0\1\1\4\0\1\27\1\30\1\1\3\0"+
    "\1\34\14\0\1\35\1\11\1\0\1\1\2\0\1\36"+
    "\3\0\1\15\1\37\1\0\1\1\5\0\1\1\2\0"+
    "\2\1\2\0\2\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\4\0\2\1\1\0\4\1\1\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0"+
    "\0\u01e0\0\u0200\0\u0220\0\u0240\0\u01e0\0\u0260\0\u01e0\0\u0280"+
    "\0\u02a0\0\u02c0\0\u01e0\0\u02e0\0\u0300\0\u0320\0\u0340\0\u01e0"+
    "\0\u0360\0\u0380\0\u03a0\0\u03c0\0\u03e0\0\u0400\0\u0420\0\u0440"+
    "\0\u0460\0\u0480\0\u04a0\0\u04c0\0\u04a0\0\u04e0\0\u0500\0\u0520"+
    "\0\u0540\0\u0560\0\u0540\0\u0580\0\u01e0\0\u05a0\0\u05c0\0\u01e0"+
    "\0\300\0\340\0\u05e0\0\u01e0\0\u0600\0\u0620\0\u0640\0\u0660"+
    "\0\u0680\0\u06a0\0\u06c0\0\u06e0\0\u01c0\0\u01e0\0\u0700\0\u01e0"+
    "\0\u0720\0\u0740\0\u0760\0\u0780\0\u07a0\0\u0300\0\u04e0\0\u07c0"+
    "\0\u07e0\0\u0320\0\u0500\0\u0800\0\u0820\0\u01e0\0\u0840\0\u0860"+
    "\0\u0880\0\u08a0\0\u08c0\0\u0360\0\u0380\0\u08e0\0\u0900\0\u0920"+
    "\0\u0940\0\u0960\0\u03c0\0\u0980\0\u09a0\0\u09c0\0\u09e0\0\u04a0"+
    "\0\u0480\0\u0a00\0\u01e0\0\u0a20\0\u0a40\0\u0a60\0\u0540\0\u0520"+
    "\0\u01e0\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0\0\u0aa0\0\u0b00\0\u0b20"+
    "\0\u0b40\0\u0640\0\u0b60\0\u0b80\0\u0680\0\u01e0\0\u01e0\0\u0ba0"+
    "\0\u0bc0\0\u0be0\0\u0c00\0\u01e0\0\u0c20\0\u0c40\0\u0c60\0\u01e0"+
    "\0\u01e0\0\u0c80\0\u0ca0\0\u0cc0\0\u0ce0\0\u0d00\0\u0d20\0\u0d40"+
    "\0\u0d60\0\u0d80\0\u0da0\0\u0dc0\0\u0de0\0\u0e00\0\u0bc0\0\u0e20"+
    "\0\u0e40\0\u0e60\0\u0e80\0\u0ea0\0\u0ec0\0\u0ee0\0\u0f00\0\u0f20"+
    "\0\u0f40\0\u0ca0\0\u0f60\0\u01e0\0\u0f80\0\u0fa0\0\u0fc0\0\u0d60"+
    "\0\u0fe0\0\u1000\0\u1020\0\u1040\0\u1060\0\u1080\0\u0ea0\0\u10a0"+
    "\0\u10c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\26\1\31\1\32\1\33\1\34\1\17"+
    "\1\35\1\36\4\17\1\20\1\37\3\17\1\40\1\41"+
    "\1\42\1\43\1\44\2\20\1\21\1\45\1\23\1\46"+
    "\1\25\1\26\1\27\1\47\1\26\1\20\1\50\1\33"+
    "\1\51\1\44\1\35\1\36\4\44\1\20\1\37\3\44"+
    "\1\40\1\41\1\42\1\20\1\52\2\20\1\21\1\53"+
    "\1\23\1\54\1\25\1\26\1\27\1\55\1\26\1\31"+
    "\1\32\1\33\1\34\1\52\1\56\1\57\4\52\1\20"+
    "\1\37\3\52\1\40\1\41\1\42\1\43\1\60\2\20"+
    "\1\21\1\61\1\23\1\62\1\25\1\26\1\27\1\63"+
    "\1\26\1\31\1\50\1\33\1\51\1\60\1\56\1\57"+
    "\4\60\1\20\1\37\3\60\1\40\1\41\1\42\1\43"+
    "\7\64\1\65\1\66\2\64\1\66\24\64\5\67\1\23"+
    "\1\67\1\70\1\26\2\67\1\26\24\67\1\71\1\0"+
    "\1\71\1\0\3\71\3\0\1\71\1\0\1\71\2\0"+
    "\13\71\1\0\1\71\1\0\3\71\1\72\1\0\1\72"+
    "\1\0\3\72\3\0\1\72\1\0\1\72\2\0\13\72"+
    "\1\0\1\72\1\0\3\72\30\0\1\73\16\0\1\74"+
    "\1\75\2\0\1\75\24\0\1\76\3\0\1\77\1\0"+
    "\1\77\3\0\1\77\5\0\1\76\2\0\4\76\2\0"+
    "\3\76\5\0\1\74\1\0\1\74\3\0\3\74\1\0"+
    "\1\74\1\0\2\74\15\0\1\74\3\0\1\100\3\0"+
    "\1\101\1\0\1\101\3\0\1\101\5\0\1\100\2\0"+
    "\4\100\2\0\3\100\5\0\1\74\5\0\2\74\2\0"+
    "\1\74\24\0\1\102\1\0\3\102\1\103\1\104\1\0"+
    "\1\105\2\102\1\105\24\102\40\0\1\17\1\0\5\17"+
    "\2\0\2\17\1\0\24\17\7\23\1\0\30\23\1\17"+
    "\1\0\5\17\1\106\1\107\2\17\1\107\24\17\10\0"+
    "\1\26\2\0\1\26\24\0\1\17\1\0\5\17\1\110"+
    "\1\111\2\17\1\111\24\17\12\0\1\112\11\0\1\113"+
    "\6\0\1\112\21\0\1\114\37\0\1\115\22\0\7\116"+
    "\1\117\10\116\1\120\1\121\16\116\7\122\1\123\12\122"+
    "\1\124\15\122\4\0\3\125\1\126\1\127\1\0\1\130"+
    "\1\127\3\0\1\131\2\0\1\125\3\130\2\125\1\132"+
    "\1\133\1\0\1\125\1\0\2\125\1\0\1\134\1\0"+
    "\1\134\1\0\3\134\3\0\1\134\1\0\1\134\2\0"+
    "\13\134\1\0\1\134\1\0\3\134\1\135\1\0\1\135"+
    "\1\0\3\135\3\0\1\135\1\0\1\135\2\0\13\135"+
    "\1\0\1\135\1\0\3\135\12\0\1\136\11\0\1\137"+
    "\6\0\1\136\4\0\1\140\1\0\1\140\1\141\1\140"+
    "\1\141\1\142\1\0\1\143\1\141\1\140\1\143\1\140"+
    "\2\141\15\140\1\141\3\140\1\44\1\0\1\44\1\0"+
    "\3\44\3\0\1\44\1\0\1\44\2\0\15\44\1\0"+
    "\4\44\1\0\1\44\1\0\3\44\1\106\1\107\1\0"+
    "\1\44\1\107\1\44\2\0\15\44\1\0\4\44\1\0"+
    "\1\44\1\0\3\44\1\110\1\111\1\0\1\44\1\111"+
    "\1\44\2\0\15\44\1\0\3\44\15\0\1\144\37\0"+
    "\1\145\22\0\1\146\1\0\3\146\1\147\1\150\1\0"+
    "\1\151\2\146\1\151\24\146\1\52\1\0\5\52\2\0"+
    "\2\52\1\0\25\52\1\0\5\52\1\106\1\107\2\52"+
    "\1\107\24\52\20\117\1\152\1\153\16\117\22\123\1\154"+
    "\15\123\1\155\1\0\1\155\1\156\1\155\1\156\1\157"+
    "\1\0\1\160\1\156\1\155\1\160\1\155\2\156\15\155"+
    "\1\156\3\155\1\60\1\0\1\60\1\0\3\60\3\0"+
    "\1\60\1\0\1\60\2\0\15\60\1\0\4\60\1\0"+
    "\1\60\1\0\3\60\1\106\1\107\1\0\1\60\1\107"+
    "\1\60\2\0\15\60\1\0\3\60\7\64\1\0\30\64"+
    "\7\0\1\161\1\66\2\0\1\66\24\0\7\67\1\0"+
    "\1\162\2\67\1\162\24\67\4\0\3\163\3\0\1\164"+
    "\4\0\1\165\2\0\1\163\3\164\2\163\1\166\1\167"+
    "\1\0\1\163\1\0\2\163\11\0\1\75\2\0\1\75"+
    "\24\0\1\170\1\0\1\170\1\171\1\170\1\171\1\172"+
    "\1\0\1\76\1\171\1\170\1\76\1\170\2\171\15\170"+
    "\1\171\3\170\1\76\1\0\1\76\1\0\3\76\3\0"+
    "\1\76\1\0\1\76\2\0\15\76\1\0\3\76\1\173"+
    "\1\0\3\173\1\174\1\175\1\0\1\100\2\173\1\100"+
    "\24\173\1\100\1\0\5\100\2\0\2\100\1\0\24\100"+
    "\1\102\1\0\4\102\1\104\1\0\1\105\2\102\1\105"+
    "\24\102\5\0\1\17\32\0\1\17\1\176\5\17\2\176"+
    "\2\17\1\176\24\17\10\0\1\107\2\0\1\107\34\0"+
    "\1\111\2\0\1\111\50\0\1\112\25\0\1\177\11\0"+
    "\1\113\6\0\1\177\4\0\5\200\1\0\1\200\1\0"+
    "\1\200\3\0\1\200\2\0\15\200\1\0\3\200\1\201"+
    "\3\115\1\202\1\115\1\202\1\0\2\115\1\202\3\115"+
    "\1\203\1\115\1\201\2\115\4\201\2\115\3\201\4\115"+
    "\7\116\1\117\30\116\6\0\1\204\37\0\1\204\13\0"+
    "\1\122\21\0\3\125\1\126\1\127\1\0\1\125\1\127"+
    "\3\0\1\131\2\0\6\125\3\0\1\125\1\0\2\125"+
    "\11\0\1\127\2\0\1\127\30\0\3\125\1\126\1\127"+
    "\1\0\1\130\1\127\3\0\1\131\2\0\1\125\3\130"+
    "\2\125\1\132\2\0\1\125\1\0\2\125\24\0\2\205"+
    "\17\0\3\125\3\0\1\125\4\0\1\131\2\0\6\125"+
    "\3\0\1\125\1\0\2\125\4\0\4\206\2\0\2\206"+
    "\4\0\1\207\2\0\7\206\2\0\4\206\25\0\1\136"+
    "\25\0\1\210\11\0\1\137\6\0\1\210\4\0\1\140"+
    "\1\0\1\140\1\141\2\140\1\142\1\0\1\143\1\141"+
    "\1\140\1\143\1\140\2\141\15\140\1\141\3\140\5\0"+
    "\1\44\32\0\1\44\1\211\1\44\1\211\3\44\3\211"+
    "\1\44\1\211\1\44\2\211\15\44\1\211\3\44\5\212"+
    "\1\0\1\212\1\0\1\212\3\0\1\212\2\0\15\212"+
    "\1\0\3\212\1\213\3\145\1\214\1\145\1\214\1\0"+
    "\2\145\1\214\3\145\1\215\1\145\1\213\2\145\4\213"+
    "\2\145\3\213\4\145\1\146\1\0\4\146\1\150\1\0"+
    "\1\151\2\146\1\151\24\146\5\0\1\52\32\0\40\117"+
    "\22\0\1\123\15\0\1\155\1\0\1\155\1\156\2\155"+
    "\1\157\1\0\1\160\1\156\1\155\1\160\1\155\2\156"+
    "\15\155\1\156\3\155\5\0\1\60\32\0\5\67\1\0"+
    "\1\67\1\0\1\162\2\67\1\162\24\67\4\0\3\163"+
    "\3\0\1\163\4\0\1\165\2\0\6\163\3\0\1\163"+
    "\1\0\2\163\5\0\3\163\3\0\1\164\4\0\1\165"+
    "\2\0\1\163\3\164\2\163\1\166\2\0\1\163\1\0"+
    "\2\163\24\0\2\216\16\0\4\217\2\0\2\217\4\0"+
    "\1\220\2\0\7\217\2\0\4\217\1\0\1\170\1\0"+
    "\1\170\1\171\2\170\1\172\1\0\1\76\1\171\1\170"+
    "\1\76\1\170\2\171\15\170\1\171\3\170\5\0\1\76"+
    "\32\0\1\173\1\0\4\173\1\175\1\0\1\100\2\173"+
    "\1\100\24\173\5\0\1\100\32\0\1\221\3\200\1\222"+
    "\1\0\1\150\1\0\1\200\1\0\1\222\1\200\2\0"+
    "\1\223\1\200\1\221\2\200\4\221\2\200\3\221\1\0"+
    "\3\200\1\224\1\115\2\224\1\225\1\226\1\202\1\0"+
    "\1\227\1\224\1\225\1\227\2\224\1\230\21\224\1\201"+
    "\1\115\2\201\1\225\1\201\1\225\1\0\1\115\1\201"+
    "\1\225\1\115\2\201\1\231\21\201\1\52\3\0\1\150"+
    "\1\0\1\150\3\0\1\150\5\0\1\52\2\0\4\52"+
    "\2\0\3\52\27\0\2\125\16\0\4\206\2\0\2\206"+
    "\1\0\1\232\2\0\1\207\2\0\7\206\2\0\4\206"+
    "\24\0\2\233\13\0\1\234\3\212\1\235\1\0\1\157"+
    "\1\0\1\212\1\0\1\235\1\212\2\0\1\236\1\212"+
    "\1\234\2\212\4\234\2\212\3\234\1\0\3\212\1\237"+
    "\1\145\1\237\1\240\1\241\1\240\1\214\1\0\1\242"+
    "\1\240\1\241\1\242\1\237\1\240\1\243\15\237\1\240"+
    "\3\237\1\213\1\145\1\213\1\145\1\241\1\213\1\241"+
    "\1\0\2\145\1\241\1\145\1\213\1\145\1\215\15\213"+
    "\1\145\3\213\1\60\3\0\1\157\1\0\1\157\3\0"+
    "\1\157\5\0\1\60\2\0\4\60\2\0\3\60\27\0"+
    "\2\163\16\0\4\217\2\0\2\217\1\0\1\244\2\0"+
    "\1\220\2\0\7\217\2\0\4\217\24\0\2\245\13\0"+
    "\1\246\1\200\2\246\1\247\1\147\1\150\1\0\1\250"+
    "\1\146\1\247\1\250\2\146\1\251\15\246\1\146\3\246"+
    "\1\221\1\200\2\221\1\247\1\52\1\252\1\0\1\200"+
    "\1\52\1\247\1\200\2\52\1\253\15\221\1\52\3\221"+
    "\1\52\3\0\1\150\1\0\1\150\3\0\1\150\3\0"+
    "\1\203\1\0\1\52\2\0\4\52\2\0\3\52\4\0"+
    "\1\224\1\115\2\224\1\225\1\224\1\202\1\0\1\227"+
    "\1\224\1\225\1\227\2\224\1\230\22\224\1\115\2\224"+
    "\1\225\1\224\1\225\1\0\1\227\1\224\1\225\1\227"+
    "\2\224\1\230\21\224\1\201\3\115\1\202\1\201\1\202"+
    "\1\0\2\115\1\202\3\115\1\203\1\115\1\201\2\115"+
    "\4\201\2\115\3\201\4\115\1\146\1\0\2\146\1\252"+
    "\1\146\1\150\1\0\1\151\1\146\1\252\1\151\25\146"+
    "\1\0\2\146\1\252\1\147\1\150\1\0\1\151\1\146"+
    "\1\252\1\151\24\146\7\0\1\126\1\127\2\0\1\127"+
    "\47\0\2\206\13\0\1\254\1\212\1\254\1\255\1\256"+
    "\1\156\1\157\1\0\1\257\1\156\1\256\1\257\1\155"+
    "\1\156\1\260\15\254\1\156\3\254\1\234\1\212\1\234"+
    "\1\212\1\256\1\60\1\261\1\0\1\212\1\0\1\256"+
    "\1\212\1\60\1\0\1\236\15\234\1\0\3\234\1\60"+
    "\3\0\1\157\1\0\1\157\3\0\1\157\3\0\1\215"+
    "\1\0\1\60\2\0\4\60\2\0\3\60\4\0\1\237"+
    "\1\145\1\237\1\240\1\241\1\237\1\214\1\0\1\242"+
    "\1\240\1\241\1\242\1\237\1\240\1\243\15\237\1\240"+
    "\3\237\1\213\3\145\1\214\1\213\1\214\1\0\2\145"+
    "\1\214\3\145\1\215\1\145\1\213\2\145\4\213\2\145"+
    "\3\213\4\145\1\237\1\145\1\237\1\240\1\241\1\237"+
    "\1\241\1\0\1\242\1\240\1\241\1\242\1\237\1\240"+
    "\1\243\15\237\1\240\3\237\1\60\3\0\1\157\1\60"+
    "\1\157\3\0\1\157\5\0\1\60\2\0\4\60\2\0"+
    "\3\60\27\0\2\217\13\0\1\246\1\200\2\246\1\247"+
    "\1\146\1\150\1\0\1\250\1\146\1\247\1\250\2\146"+
    "\1\251\15\246\1\146\4\246\1\200\2\246\1\247\1\146"+
    "\1\252\1\0\1\250\1\146\1\247\1\250\2\146\1\251"+
    "\15\246\1\146\3\246\1\146\1\0\2\146\1\252\1\146"+
    "\1\150\1\0\1\151\1\146\1\252\1\151\2\146\1\230"+
    "\22\146\1\0\4\146\1\252\1\0\1\151\2\146\1\151"+
    "\25\146\1\0\2\146\1\252\1\147\1\150\1\0\1\151"+
    "\1\146\1\252\1\151\2\146\1\230\21\146\1\254\1\212"+
    "\1\254\1\255\1\256\1\155\1\157\1\0\1\257\1\156"+
    "\1\256\1\257\1\155\1\156\1\260\15\254\1\156\3\254"+
    "\1\234\3\212\1\235\1\60\1\157\1\0\1\212\1\0"+
    "\1\235\1\212\2\0\1\236\1\212\1\234\2\212\4\234"+
    "\2\212\3\234\1\0\3\212\1\254\1\212\1\254\1\255"+
    "\1\256\1\155\1\261\1\0\1\257\1\156\1\256\1\257"+
    "\1\155\1\156\1\260\15\254\1\156\3\254\1\60\3\0"+
    "\1\157\1\60\1\157\3\0\1\157\3\0\1\215\1\0"+
    "\1\60\2\0\4\60\2\0\3\60\4\0\1\155\1\0"+
    "\1\155\1\156\2\155\1\261\1\0\1\160\1\156\1\155"+
    "\1\160\1\155\2\156\15\155\1\156\3\155";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\1\2\11\3\1\1\11\1\1\1\11\3\1"+
    "\1\11\4\1\1\11\24\1\1\11\2\1\1\11\3\1"+
    "\1\11\1\1\4\0\1\1\1\0\1\1\1\0\1\11"+
    "\1\1\1\11\3\1\5\0\1\1\2\0\1\1\1\0"+
    "\1\11\1\1\4\0\5\1\1\0\1\1\3\0\1\1"+
    "\4\0\1\11\2\1\3\0\1\11\1\0\2\1\5\0"+
    "\1\1\2\0\1\1\2\11\1\0\1\1\2\0\1\11"+
    "\3\0\2\11\1\0\1\1\5\0\1\1\2\0\2\1"+
    "\2\0\2\1\2\0\1\1\2\0\1\1\1\0\1\1"+
    "\2\0\1\11\1\0\2\1\1\0\4\1\1\0\1\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private int currentLineIndent = 0;
  private int valueIndent = -1;
  private int braceCount = 0;
  private IElementType valueTokenType = null;
  private int previousState = YYINITIAL;
  private int previousAnchorState = YYINITIAL;

  protected int yycolumn = 0;

  public boolean isCleanState() {
    return yystate() == YYINITIAL
      && currentLineIndent == 0
      && braceCount == 0;
  }

  public void cleanMyState() {
    currentLineIndent = 0;
    braceCount = 0;
  }

  private char previousChar() {
    return getChar(-1);
  }

  private char getChar(final int offset) {
    final int loc = getTokenStart()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private char getCharAfter(final int offset) {
    final int loc = getTokenEnd()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private IElementType getWhitespaceTypeAndUpdateIndent() {
    if (isAfterEol()) {
      currentLineIndent = yylength();
      return INDENT;
    }
    else {
      return WHITESPACE;
    }
  }

  private boolean isAfterEol() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\n';
  }

  private boolean isAfterSpace() {
    final char prev = previousChar();
    return prev == (char)-1 || prev == '\t' || prev == ' ';
  }

  private void yyBegin(int newState) {
    //System.out.println("yybegin(): " + newState);
    yybegin(newState);
  }

  private boolean startsWith(CharSequence haystack, CharSequence needle) {
    for (int i = Math.min(haystack.length(), needle.length()) - 1; i >= 0; i--) {
      if (haystack.charAt(i) != needle.charAt(i)) {
        return false;
      }
    }
    return true;
  }

  private IElementType tokenOrForbidden(IElementType tokenType) {
    if (!isAfterEol() || yylength() < 3) {
      return tokenType;
    }

    if (startsWith(yytext(), "---")) {
      braceCount = 0;
      yyBegin(YYINITIAL);
      yypushback(yylength() - 3);
      return DOCUMENT_MARKER;
    }
    if (startsWith(yytext(), "...")) {
      braceCount = 0;
      yyBegin(YYINITIAL);
      yypushback(yylength() - 3);
      return DOCUMENT_END;
    }
    return tokenType;
  }

  // The compact notation may be used when the entry is itself a nested block collection.
  // In this case, both the “-” indicator and the following spaces are considered to be part of the indentation of the nested collection.
  // See 8.2.1. Block Sequences http://www.yaml.org/spec/1.2/spec.html#id2797382
  private IElementType getScalarKeyAndUpdateIndent() {
    currentLineIndent = yycolumn;
    return SCALAR_KEY;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _YAMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return tokenOrForbidden(TEXT);
            } 
            // fall through
          case 32: break;
          case 2: 
            { return TEXT;
            } 
            // fall through
          case 33: break;
          case 3: 
            { if (braceCount > 0) {
                                      yyBegin(BRACES);
                                      return COMMA;
                                    }
                                    yyBegin(VALUE);
                                    return TEXT;
            } 
            // fall through
          case 34: break;
          case 4: 
            { return QUESTION;
            } 
            // fall through
          case 35: break;
          case 5: 
            { // YAML spec: when a comment follows another syntax element,
                                  //  it must be separated from it by space characters.
                                  // See http://www.yaml.org/spec/1.2/spec.html#comment
                                  return (isAfterEol() || isAfterSpace()) ? COMMENT : TEXT;
            } 
            // fall through
          case 36: break;
          case 6: 
            { if (braceCount == 0) {
                                      yyBegin(YYINITIAL);
                                    }
                                    currentLineIndent = 0;
                                    return EOL;
            } 
            // fall through
          case 37: break;
          case 7: 
            { return getWhitespaceTypeAndUpdateIndent();
            } 
            // fall through
          case 38: break;
          case 8: 
            { if (braceCount == 0) {
                                      yyBegin(VALUE);
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACKET;
            } 
            // fall through
          case 39: break;
          case 9: 
            { yyBegin(BS_HEADER_TAIL);
                                    valueTokenType = SCALAR_TEXT;
                                    return valueTokenType;
            } 
            // fall through
          case 40: break;
          case 10: 
            { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACE;
            } 
            // fall through
          case 41: break;
          case 11: 
            { if (braceCount == 0) {
                                      yyBegin(VALUE);
                                      return TEXT;
                                    }
                                    braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yyBegin(previousState);
                                    }
                                    return RBRACE;
            } 
            // fall through
          case 42: break;
          case 12: 
            { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yyBegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACKET;
            } 
            // fall through
          case 43: break;
          case 13: 
            { yyBegin(BS_HEADER_TAIL);
                                    valueTokenType = SCALAR_LIST;
                                    return valueTokenType;
            } 
            // fall through
          case 44: break;
          case 14: 
            { if (currentLineIndent <= valueIndent) {
                                                yypushback(yylength());
                                                yyBegin(YYINITIAL);
                                                break;
                                            } else {
                                                return valueTokenType;
                                            }
            } 
            // fall through
          case 45: break;
          case 15: 
            { currentLineIndent = 0;
          // First comment with ident less then block scalar ident should be after the end of this block.
          // So another EOL type is used to recognize such situation from the parser.
          return SCALAR_EOL;
            } 
            // fall through
          case 46: break;
          case 16: 
            { IElementType type = getWhitespaceTypeAndUpdateIndent();
                                            if (currentLineIndent <= valueIndent) {
                                              yyBegin(YYINITIAL);
                                            }
                                            return type;
            } 
            // fall through
          case 47: break;
          case 17: 
            { yyBegin(INDENT_VALUE);
                                    valueIndent = currentLineIndent;
                                    return EOL;
            } 
            // fall through
          case 48: break;
          case 18: 
            { yyBegin(previousAnchorState);
                                    return ANCHOR;
            } 
            // fall through
          case 49: break;
          case 19: 
            { yyBegin(previousAnchorState);
                                    return ALIAS;
            } 
            // fall through
          case 50: break;
          case 20: 
            { if (zzMarkedPos == zzEndRead){
    return SCALAR_KEY;
  }
  yyBegin(VALUE);
  return tokenOrForbidden(TEXT);
            } 
            // fall through
          case 51: break;
          case 21: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return COLON;
            } 
            // fall through
          case 52: break;
          case 22: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yyBegin(VALUE_OR_KEY);
                                    return SEQUENCE_MARKER;
            } 
            // fall through
          case 53: break;
          case 23: 
            { return SCALAR_DSTRING;
            } 
            // fall through
          case 54: break;
          case 24: 
            { return SCALAR_STRING;
            } 
            // fall through
          case 55: break;
          case 25: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return TAG;
            } 
            // fall through
          case 56: break;
          case 26: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { previousAnchorState = yystate();
                                    yyBegin(ANCHOR_MODE);
                                    return AMPERSAND;
            } 
            // fall through
          case 57: break;
          case 27: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { previousAnchorState = yystate();
                                    yyBegin(ALIAS_MODE);
                                    return STAR;
            } 
            // fall through
          case 58: break;
          case 28: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return getWhitespaceTypeAndUpdateIndent();
            } 
            // fall through
          case 59: break;
          case 29: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 12;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 13;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yyBegin(VALUE);
  return getScalarKeyAndUpdateIndent();
            } 
            // fall through
          case 60: break;
          case 30: 
            { return getScalarKeyAndUpdateIndent();
            } 
            // fall through
          case 61: break;
          case 31: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yyBegin(VALUE_BRACE);
  return SCALAR_KEY;
            } 
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
