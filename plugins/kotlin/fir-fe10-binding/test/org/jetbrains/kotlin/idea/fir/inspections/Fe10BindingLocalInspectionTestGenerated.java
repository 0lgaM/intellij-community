// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.idea.fir.inspections;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir-fe10-binding")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public abstract class Fe10BindingLocalInspectionTestGenerated extends AbstractFe10BindingLocalInspectionTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/addOperatorModifier")
    public static class AddOperatorModifier extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("containsBool.kt")
        public void testContainsBool() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/containsBool.kt");
        }

        @TestMetadata("containsInt.kt")
        public void testContainsInt() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/containsInt.kt");
        }

        @TestMetadata("extension.kt")
        public void testExtension() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/extension.kt");
        }

        @TestMetadata("forOverride.kt")
        public void testForOverride() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/forOverride.kt");
        }

        @TestMetadata("overridden.kt")
        public void testOverridden() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/overridden.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/simple.kt");
        }

        @TestMetadata("toplevel.kt")
        public void testToplevel() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/addOperatorModifier/toplevel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument")
    public static class BooleanLiteralArgument extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("boolean.kt")
        public void testBoolean() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/boolean.kt");
        }

        @TestMetadata("booleanLiteral.kt")
        public void testBooleanLiteral() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteral.kt");
        }

        @TestMetadata("booleanLiteralFixAll.kt")
        public void testBooleanLiteralFixAll() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralFixAll.kt");
        }

        @TestMetadata("booleanLiteralFixPart.kt")
        public void testBooleanLiteralFixPart() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralFixPart.kt");
        }

        @TestMetadata("booleanLiteralMiddle.kt")
        public void testBooleanLiteralMiddle() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralMiddle.kt");
        }

        @TestMetadata("booleanLiteralNoPrevious.kt")
        public void testBooleanLiteralNoPrevious() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/booleanLiteralNoPrevious.kt");
        }

        @TestMetadata("hasError.kt")
        public void testHasError() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasError.kt");
        }

        @TestMetadata("hasName.kt")
        public void testHasName() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasName.kt");
        }

        @TestMetadata("hasVararg.kt")
        public void testHasVararg() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/hasVararg.kt");
        }

        @TestMetadata("intLiteral.kt")
        public void testIntLiteral() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/intLiteral.kt");
        }

        @TestMetadata("javaMethod.kt")
        public void testJavaMethod() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/javaMethod.kt");
        }

        @TestMetadata("pair.kt")
        public void testPair() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/pair.kt");
        }

        @TestMetadata("triple.kt")
        public void testTriple() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/triple.kt");
        }

        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/booleanLiteralArgument/vararg.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject")
    public static class ConvertSealedSubClassToObject extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("annotation.kt")
        public void testAnnotation() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/annotation.kt");
        }

        @TestMetadata("baseEquals.kt")
        public void testBaseEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/baseEquals.kt");
        }

        @TestMetadata("baseState.kt")
        public void testBaseState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/baseState.kt");
        }

        @TestMetadata("convertSubClassFromAnotherFile.kt")
        public void testConvertSubClassFromAnotherFile() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassFromAnotherFile.kt");
        }

        @TestMetadata("convertSubClassWithModifiers.kt")
        public void testConvertSubClassWithModifiers() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithModifiers.kt");
        }

        @TestMetadata("convertSubClassWithParentheses.kt")
        public void testConvertSubClassWithParentheses() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithParentheses.kt");
        }

        @TestMetadata("convertSubClassWithSecondaryConstructor.kt")
        public void testConvertSubClassWithSecondaryConstructor() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithSecondaryConstructor.kt");
        }

        @TestMetadata("convertSubClassWithoutParentheses.kt")
        public void testConvertSubClassWithoutParentheses() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/convertSubClassWithoutParentheses.kt");
        }

        @TestMetadata("data.kt")
        public void testData() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/data.kt");
        }

        @TestMetadata("enum.kt")
        public void testEnum() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/enum.kt");
        }

        @TestMetadata("fakeState.kt")
        public void testFakeState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/fakeState.kt");
        }

        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/generic.kt");
        }

        @TestMetadata("inner.kt")
        public void testInner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/inner.kt");
        }

        @TestMetadata("noEquals.kt")
        public void testNoEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/noEquals.kt");
        }

        @TestMetadata("nonEmptyConstructor.kt")
        public void testNonEmptyConstructor() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/nonEmptyConstructor.kt");
        }

        @TestMetadata("openSubclass.kt")
        public void testOpenSubclass() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/openSubclass.kt");
        }

        @TestMetadata("ownEquals.kt")
        public void testOwnEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/ownEquals.kt");
        }

        @TestMetadata("ownState.kt")
        public void testOwnState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/ownState.kt");
        }

        @TestMetadata("sealed.kt")
        public void testSealed() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealed.kt");
        }

        @TestMetadata("sealedEquals.kt")
        public void testSealedEquals() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealedEquals.kt");
        }

        @TestMetadata("sealedState.kt")
        public void testSealedState() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/sealedState.kt");
        }

        @TestMetadata("withCompanion.kt")
        public void testWithCompanion() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/withCompanion.kt");
        }

        @TestMetadata("withInner.kt")
        public void testWithInner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/convertSealedSubClassToObject/withInner.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../idea/tests/testData/inspectionsLocal/cascadeIf")
    public static class CascadeIf extends AbstractFe10BindingLocalInspectionTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("cannotIntroduceSubject.kt")
        public void testCannotIntroduceSubject() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/cannotIntroduceSubject.kt");
        }

        @TestMetadata("complex.kt")
        public void testComplex() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/complex.kt");
        }

        @TestMetadata("four.kt")
        public void testFour() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/four.kt");
        }

        @TestMetadata("ifTree.kt")
        public void testIfTree() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/ifTree.kt");
        }

        @TestMetadata("insideOtherIf.kt")
        public void testInsideOtherIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/insideOtherIf.kt");
        }

        @TestMetadata("middleIf.kt")
        public void testMiddleIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/middleIf.kt");
        }

        @TestMetadata("noSecondElse.kt")
        public void testNoSecondElse() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/noSecondElse.kt");
        }

        @TestMetadata("normal.kt")
        public void testNormal() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/normal.kt");
        }

        @TestMetadata("oneLiner.kt")
        public void testOneLiner() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/oneLiner.kt");
        }

        @TestMetadata("shortIf.kt")
        public void testShortIf() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/shortIf.kt");
        }

        @TestMetadata("withAnnotation.kt")
        public void testWithAnnotation() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/withAnnotation.kt");
        }

        @TestMetadata("withBreak.kt")
        public void testWithBreak() throws Exception {
            runTest("../idea/tests/testData/inspectionsLocal/cascadeIf/withBreak.kt");
        }
    }
}
