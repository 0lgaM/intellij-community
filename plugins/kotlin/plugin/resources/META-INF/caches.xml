<idea-plugin>
  <extensions defaultExtensionNs="com.intellij">
    <fileType.fileViewProviderFactory filetype="kotlin_builtins" implementationClass="com.intellij.psi.ClassFileViewProviderFactory"/>
    <filetype.stubBuilder filetype="kotlin_builtins" implementationClass="com.intellij.psi.impl.compiled.ClassFileStubBuilder"/>
    <filetype.decompiler filetype="kotlin_builtins" implementationClass="com.intellij.psi.impl.compiled.ClassFileDecompiler"/>
    <applicationService serviceInterface="org.jetbrains.kotlin.analysis.decompiler.stub.file.FileAttributeService"
                        serviceImplementation="org.jetbrains.kotlin.idea.caches.FileAttributeServiceImpl"/>

    <postStartupActivity implementation="org.jetbrains.kotlin.idea.caches.project.VfsCodeBlockModificationListener"/>

    <!-- since 192 use light service @Service instead of this declaration -->
    <applicationService serviceImplementation="org.jetbrains.kotlin.analysis.decompiler.stub.file.ClsKotlinBinaryClassCache"/>

    <applicationService serviceImplementation="org.jetbrains.kotlin.load.kotlin.KotlinBinaryClassCache"/>

    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.trackers.KotlinCodeBlockModificationListener"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.trackers.PureKotlinCodeBlockModificationListener"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.project.LibraryModificationTracker"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.PerModulePackageCacheService"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.analysis.decompiled.light.classes.ClsJavaStubByVirtualFileCache"/>

    <projectService
            serviceInterface="org.jetbrains.kotlin.analyzer.KotlinModificationTrackerService"
            serviceImplementation="org.jetbrains.kotlin.idea.caches.trackers.KotlinIDEModificationTrackerService"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.idea.caches.project.LibraryDependenciesCache"
            serviceImplementation="org.jetbrains.kotlin.idea.caches.project.LibraryDependenciesCacheImpl"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.idea.caches.project.SdkInfoCache"
            serviceImplementation="org.jetbrains.kotlin.idea.caches.project.SdkInfoCacheImpl"/>
    <projectService
            serviceInterface="org.jetbrains.kotlin.idea.caches.project.KotlinStdlibCache"
            serviceImplementation="org.jetbrains.kotlin.idea.caches.project.KotlinStdlibCacheImpl"/>

    <psi.treeChangePreprocessor implementation="org.jetbrains.kotlin.idea.caches.KotlinPackageStatementPsiTreeChangePreprocessor"/>

    <cachesInvalidator implementation="org.jetbrains.kotlin.idea.artifacts.LazyFileOutputProducerCacheInvalidator"/>

    <java.shortNamesCache implementation="org.jetbrains.kotlin.idea.caches.KotlinShortNamesCache"/>

    <!-- just in case flag to be able to switch to an original (or close) to original behaviour -->
    <registryKey
            key="kotlin.caches.fine.grained.invalidation"
            description="Allow a fine grained caches invalidation"
            defaultValue="true"
            restartRequired="true"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.caches.project.LibraryInfoCache"/>
    <projectService serviceImplementation="org.jetbrains.kotlin.idea.project.ModulePlatformCache"/>
  </extensions>

  <projectListeners>
    <listener class="org.jetbrains.kotlin.idea.caches.project.LibraryInfoCache$ModelChangeListener"
              topic="com.intellij.workspaceModel.ide.WorkspaceModelChangeListener"/>
    <listener class="org.jetbrains.kotlin.idea.project.ModulePlatformCache$ModelChangeListener"
              topic="com.intellij.workspaceModel.ide.WorkspaceModelChangeListener"/>
  </projectListeners>
</idea-plugin>