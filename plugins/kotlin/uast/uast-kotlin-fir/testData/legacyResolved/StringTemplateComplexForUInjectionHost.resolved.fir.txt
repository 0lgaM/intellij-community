UPolyadicExpression (operator = +) -> USimpleNameReferenceExpression (identifier = case4) -> SymbolLightAccessorMethod:getCase4: getCase4
UPolyadicExpression (operator = +) -> USimpleNameReferenceExpression (identifier = case4) -> SymbolLightAccessorMethod:getCase4: getCase4
UPolyadicExpression (operator = +) -> UQualifiedReferenceExpression -> null: null
UPolyadicExpression (operator = +) -> UQualifiedReferenceExpression -> null: null
UPolyadicExpression (operator = +) -> USimpleNameReferenceExpression (identifier = case4) -> SymbolLightAccessorMethod:getCase4: getCase4
UPolyadicExpression (operator = +) -> USimpleNameReferenceExpression (identifier = case4) -> SymbolLightAccessorMethod:getCase4: getCase4
UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to null) -> USimpleNameReferenceExpression (identifier = repeat) -> FUN: repeat
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UReturnExpression -> USimpleNameReferenceExpression (identifier = i) -> SymbolLightParameter:i: i
UReturnExpression -> USimpleNameReferenceExpression (identifier = i) -> SymbolLightParameter:i: i
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = println) -> Decompiled_Method: println
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = baz) -> SymbolLightSimpleMethod:baz: baz
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = baz) -> SymbolLightSimpleMethod:baz: baz
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to SymbolLightSimpleMethod:simpleForTemplate) -> USimpleNameReferenceExpression (identifier = simpleForTemplate) -> SymbolLightSimpleMethod:simpleForTemplate: simpleForTemplate
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to SymbolLightSimpleMethod:simpleForTemplate) -> USimpleNameReferenceExpression (identifier = simpleForTemplate) -> SymbolLightSimpleMethod:simpleForTemplate: simpleForTemplate
    ULocalVariable (name = trimA) -> UQualifiedReferenceExpression -> null: null
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to null) -> USimpleNameReferenceExpression (identifier = trimIndent) -> FUN: trimIndent
    ULocalVariable (name = trimB) -> UQualifiedReferenceExpression -> null: null
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to null) -> USimpleNameReferenceExpression (identifier = trimMargin) -> FUN: trimMargin
    UBinaryExpression (operator = ==) -> USimpleNameReferenceExpression (identifier = ==) -> null: null
    UBinaryExpression (operator = ==) -> UQualifiedReferenceExpression -> null: null
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to null) -> USimpleNameReferenceExpression (identifier = trimIndent) -> FUN: trimIndent
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = +) -> FUN: plus
    UBinaryExpression (operator = +) -> USimpleNameReferenceExpression (identifier = +) -> FUN: plus
