UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = =) -> null: null
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = init) -> SymbolLightParameter:init: init
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
    ULocalVariable (name = result) -> USimpleNameReferenceExpression (identifier = privateProp) -> Kotlin_Light_Variable: privateProp
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = privateProp) -> Kotlin_Light_Variable: privateProp
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = =) -> null: null
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = x) -> SymbolLightParameter:x: x
    UReturnExpression -> USimpleNameReferenceExpression (identifier = privateProp) -> Kotlin_Light_Variable: privateProp
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to SymbolLightConstructor:A) -> USimpleNameReferenceExpression (identifier = A) -> SymbolLightConstructor:A: A
    UPrefixExpression (operator = -) -> USimpleNameReferenceExpression (identifier = -) -> FUN: unaryMinus
    UPrefixExpression (operator = -) -> UQualifiedReferenceExpression -> SymbolLightAccessorMethod:getMutableProp: getMutableProp
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = a) -> Kotlin_Light_Variable: a
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:getMutableProp: getMutableProp
    UBinaryExpression (operator = =) -> UQualifiedReferenceExpression -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = a) -> Kotlin_Light_Variable: a
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = =) -> null: null
    UBinaryExpression (operator = +=) -> UQualifiedReferenceExpression -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = a) -> Kotlin_Light_Variable: a
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UBinaryExpression (operator = +=) -> USimpleNameReferenceExpression (identifier = +=) -> FUN: plus
    UBinaryExpression (operator = +=) -> USimpleNameReferenceExpression (identifier = x) -> Kotlin_Light_Variable: x
    UPrefixExpression (operator = ++) -> USimpleNameReferenceExpression (identifier = ++) -> FUN: inc
    UPrefixExpression (operator = ++) -> UQualifiedReferenceExpression -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = a) -> null: null
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UPostfixExpression (operator = --) -> UQualifiedReferenceExpression -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = a) -> null: null
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UPostfixExpression (operator = --) -> USimpleNameReferenceExpression (identifier = --) -> FUN: dec
UTypeReferenceExpression (name = A) -> USimpleNameReferenceExpression (identifier = A) -> SymbolLightClass:class A(init: Int) {
    private var privateProp = 0 // accesses should be field accesses
    var mutableProp: Int
    init {
        mutableProp = init
    }

    fun add(x: Int): Int {
        val result = privateProp
        privateProp = x
        return privateProp
    }
}: A
    UPrefixExpression (operator = -) -> USimpleNameReferenceExpression (identifier = -) -> FUN: unaryMinus
    UPrefixExpression (operator = -) -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:getMutableProp: getMutableProp
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UBinaryExpression (operator = =) -> USimpleNameReferenceExpression (identifier = =) -> null: null
    UBinaryExpression (operator = +=) -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UBinaryExpression (operator = +=) -> USimpleNameReferenceExpression (identifier = +=) -> FUN: plus
    UBinaryExpression (operator = +=) -> USimpleNameReferenceExpression (identifier = x) -> Kotlin_Light_Variable: x
    UPrefixExpression (operator = ++) -> USimpleNameReferenceExpression (identifier = ++) -> FUN: inc
    UPrefixExpression (operator = ++) -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UPostfixExpression (operator = --) -> USimpleNameReferenceExpression (identifier = mutableProp) -> SymbolLightAccessorMethod:setMutableProp: setMutableProp
    UPostfixExpression (operator = --) -> USimpleNameReferenceExpression (identifier = --) -> FUN: dec
