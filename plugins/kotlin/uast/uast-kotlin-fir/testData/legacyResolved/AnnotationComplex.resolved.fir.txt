UTypeReferenceExpression (name = java.lang.String[]) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = Annotation) -> USimpleNameReferenceExpression (identifier = Annotation) -> SymbolLightAnnotationClassSymbol:annotation class Annotation(vararg val strings: String): Annotation
UTypeReferenceExpression (name = Annotation) -> USimpleNameReferenceExpression (identifier = Annotation) -> SymbolLightAnnotationClassSymbol:annotation class Annotation(vararg val strings: String): Annotation
UTypeReferenceExpression (name = AnnotationArray) -> USimpleNameReferenceExpression (identifier = AnnotationArray) -> SymbolLightAnnotationClassSymbol:annotation class AnnotationArray(vararg val value: Annotation): AnnotationArray
UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = Annotation) -> SymbolLightAnnotationClassSymbol:annotation class Annotation(vararg val strings: String): Annotation
UTypeReferenceExpression (name = AnnotationArray) -> USimpleNameReferenceExpression (identifier = AnnotationArray) -> SymbolLightAnnotationClassSymbol:annotation class AnnotationArray(vararg val value: Annotation): AnnotationArray
null -> USimpleNameReferenceExpression (identifier = value) -> SymbolLightAccessorMethod:value: value
UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = Annotation) -> SymbolLightAnnotationClassSymbol:annotation class Annotation(vararg val strings: String): Annotation
UTypeReferenceExpression (name = Annotation[]) -> USimpleNameReferenceExpression (identifier = Annotation) -> SymbolLightAnnotationClassSymbol:annotation class Annotation(vararg val strings: String): Annotation
UTypeReferenceExpression (name = AnnotationArray) -> USimpleNameReferenceExpression (identifier = AnnotationArray) -> SymbolLightAnnotationClassSymbol:annotation class AnnotationArray(vararg val value: Annotation): AnnotationArray
UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = Annotation) -> SymbolLightAnnotationClassSymbol:annotation class Annotation(vararg val strings: String): Annotation
null -> USimpleNameReferenceExpression (identifier = strings) -> SymbolLightAccessorMethod:strings: strings
UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 2))(resolves to null) -> USimpleNameReferenceExpression (identifier = arrayOf) -> null: null
UTypeReferenceExpression (name = AnnotationArray) -> USimpleNameReferenceExpression (identifier = AnnotationArray) -> SymbolLightAnnotationClassSymbol:annotation class AnnotationArray(vararg val value: Annotation): AnnotationArray
UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to Kotlin_Light_Method) -> USimpleNameReferenceExpression (identifier = Annotation) -> SymbolLightAnnotationClassSymbol:annotation class Annotation(vararg val strings: String): Annotation
null -> USimpleNameReferenceExpression (identifier = strings) -> SymbolLightAccessorMethod:strings: strings
UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))(resolves to Kotlin_Light_Method) -> UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 2)) -> null:
