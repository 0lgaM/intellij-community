UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = float) -> USimpleNameReferenceExpression (identifier = Float) -> Decompiled_Class: Float
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = float) -> USimpleNameReferenceExpression (identifier = Float) -> Decompiled_Class: Float
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to SymbolLightSimpleMethod:global) -> USimpleNameReferenceExpression (identifier = global) -> SymbolLightSimpleMethod:global: global
    null -> USimpleNameReferenceExpression (identifier = b) -> SymbolLightParameter:b: b
    null -> USimpleNameReferenceExpression (identifier = a) -> SymbolLightParameter:a: a
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to SymbolLightSimpleMethod:withDefault) -> USimpleNameReferenceExpression (identifier = withDefault) -> SymbolLightSimpleMethod:withDefault: withDefault
    null -> USimpleNameReferenceExpression (identifier = d) -> SymbolLightParameter:d: d
    UBlockExpression -> UQualifiedReferenceExpression -> SymbolLightSimpleMethod:withReceiver: withReceiver
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to SymbolLightSimpleMethod:withReceiver) -> USimpleNameReferenceExpression (identifier = withReceiver) -> SymbolLightSimpleMethod:withReceiver: withReceiver
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: atan2
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = Math) -> Decompiled_Class: Math
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = atan2) -> Decompiled_Method: atan2
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to null) -> USimpleNameReferenceExpression (identifier = unresolvedMethod) -> null: null
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 4))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to null) -> USimpleNameReferenceExpression (identifier = arrayOf) -> FUN: arrayOf
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to null) -> USimpleNameReferenceExpression (identifier = arrayOf) -> FUN: arrayOf
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))(resolves to null) -> USimpleNameReferenceExpression (identifier = arrayOf) -> FUN: arrayOf
    UBlockExpression -> UQualifiedReferenceExpression -> Decompiled_Method: format
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> Decompiled_Class: String
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = java) -> PsiPackage:java: java
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = lang) -> PsiPackage:java.lang: lang
    UQualifiedReferenceExpression -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> USimpleNameReferenceExpression (identifier = format) -> Decompiled_Method: format
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to Decompiled_Method) -> UQualifiedReferenceExpression -> null: null
    UQualifiedReferenceExpression -> UQualifiedReferenceExpression -> null: null
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))(resolves to null) -> USimpleNameReferenceExpression (identifier = chunked) -> FUN: chunked
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))(resolves to null) -> USimpleNameReferenceExpression (identifier = toTypedArray) -> FUN: toTypedArray
    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to null) -> USimpleNameReferenceExpression (identifier = with) -> FUN: with
    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))(resolves to SymbolLightConstructor:A) -> USimpleNameReferenceExpression (identifier = A) -> SymbolLightClass:class A {

    fun String.with2Receivers(a: Int, b: Float) {}

}: A
        UBlockExpression -> UQualifiedReferenceExpression -> SymbolLightSimpleMethod:with2Receivers: with2Receivers
        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))(resolves to SymbolLightSimpleMethod:with2Receivers) -> USimpleNameReferenceExpression (identifier = with2Receivers) -> SymbolLightSimpleMethod:with2Receivers: with2Receivers
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
UTypeReferenceExpression (name = float) -> USimpleNameReferenceExpression (identifier = Float) -> Decompiled_Class: Float
UTypeReferenceExpression (name = java.lang.String) -> USimpleNameReferenceExpression (identifier = String) -> Decompiled_Class: String
UTypeReferenceExpression (name = int) -> USimpleNameReferenceExpression (identifier = Int) -> Decompiled_Class: Integer
    UBlockExpression -> UObjectLiteralExpression -> SymbolLightConstructor:Parent:
    UBlockExpression -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) -> SymbolLightConstructor:Parent:
    UTypeReferenceExpression (name = Parent) -> USimpleNameReferenceExpression (identifier = Parent) -> SymbolLightConstructor:Parent: Parent
    null -> USimpleNameReferenceExpression (identifier = b) -> SymbolLightParameter:b: b
    null -> USimpleNameReferenceExpression (identifier = a) -> SymbolLightParameter:a: a
